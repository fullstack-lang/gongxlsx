// generated by gong
import { Component, OnInit, AfterViewInit, ViewChild, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs'
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

const allowMultiSelect = true;

import { Router, RouterState } from '@angular/router';
import { XLCellDB } from '../xlcell-db'
import { XLCellService } from '../xlcell.service'

import { FrontRepoService, FrontRepo } from '../front-repo.service'

// generated table component
@Component({
  selector: 'app-xlcellstable',
  templateUrl: './xlcells-table.component.html',
  styleUrls: ['./xlcells-table.component.css'],
})
export class XLCellsTableComponent implements OnInit {

  // used if the component is called as a selection component of XLCell instances
  selection: SelectionModel<XLCellDB>;
  initialSelection = new Array<XLCellDB>();

  // the data source for the table
  xlcells: XLCellDB[];
  matTableDataSource: MatTableDataSource<XLCellDB>


  // front repo, that will be referenced by this.xlcells
  frontRepo: FrontRepo

  // displayedColumns is referenced by the MatTable component for specify what columns
  // have to be displayed and in what order
  displayedColumns: string[];

  // for sorting & pagination
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;

  ngAfterViewInit() {

	// enable sorting on all fields (including pointers and reverse pointer)
	this.matTableDataSource.sortingDataAccessor = (xlcellDB: XLCellDB, property: string) => {
		switch (property) {
				// insertion point for specific sorting accessor
			case 'Name':
				return xlcellDB.Name;

			case 'X':
				return xlcellDB.X;

			case 'Y':
				return xlcellDB.Y;

				case 'Cells':
					return this.frontRepo.XLRows.get(xlcellDB.XLRow_CellsDBID.Int64)?.Name;

				case 'SheetCells':
					return this.frontRepo.XLSheets.get(xlcellDB.XLSheet_SheetCellsDBID.Int64)?.Name;

				default:
					return XLCellDB[property];
		}
	}; 

	// enable filtering on all fields (including pointers and reverse pointer, which is not done by default)
	this.matTableDataSource.filterPredicate = (xlcellDB: XLCellDB, filter: string) => {

		// filtering is based on finding a lower case filter into a concatenated string
		// the xlcellDB properties
		let mergedContent = ""

		// insertion point for merging of fields
		mergedContent += xlcellDB.Name.toLowerCase()
		mergedContent += xlcellDB.X.toString()
		mergedContent += xlcellDB.Y.toString()
		if (xlcellDB.XLRow_CellsDBID.Int64 != 0) {
        	mergedContent += this.frontRepo.XLRows.get(xlcellDB.XLRow_CellsDBID.Int64)?.Name.toLowerCase()
    	}

		if (xlcellDB.XLSheet_SheetCellsDBID.Int64 != 0) {
        	mergedContent += this.frontRepo.XLSheets.get(xlcellDB.XLSheet_SheetCellsDBID.Int64)?.Name.toLowerCase()
    	}


		let isSelected = mergedContent.includes(filter.toLowerCase())
		return isSelected
	};

    this.matTableDataSource.sort = this.sort;
    this.matTableDataSource.paginator = this.paginator;
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.matTableDataSource.filter = filterValue.trim().toLowerCase();
  }

  constructor(
    private xlcellService: XLCellService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of xlcell instances
    public dialogRef: MatDialogRef<XLCellsTableComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {
    // observable for changes in structs
    this.xlcellService.XLCellServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getXLCells()
        }
      }
    )
    if (dialogData == undefined) {
      this.displayedColumns = ['ID', 'Edit', 'Delete', // insertion point for columns to display
        "Name",
        "X",
        "Y",
        "Cells",
        "SheetCells",
      ]
    } else {
      this.displayedColumns = ['select', 'ID', // insertion point for columns to display
        "Name",
        "X",
        "Y",
        "Cells",
        "SheetCells",
      ]
      this.selection = new SelectionModel<XLCellDB>(allowMultiSelect, this.initialSelection);
    }

  }

  ngOnInit(): void {
    this.getXLCells()
    this.matTableDataSource = new MatTableDataSource(this.xlcells)
  }

  getXLCells(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        this.xlcells = this.frontRepo.XLCells_array;

        // insertion point for variables Recoveries

        // in case the component is called as a selection component
        if (this.dialogData != undefined) {
          this.xlcells.forEach(
            xlcell => {
              let ID = this.dialogData.ID
              let revPointer = xlcell[this.dialogData.ReversePointer]
              if (revPointer.Int64 == ID) {
                this.initialSelection.push(xlcell)
              }
            }
          )
          this.selection = new SelectionModel<XLCellDB>(allowMultiSelect, this.initialSelection);
        }

        // update the mat table data source
        this.matTableDataSource.data = this.xlcells
      }
    )
  }

  // newXLCell initiate a new xlcell
  // create a new XLCell objet
  newXLCell() {
  }

  deleteXLCell(xlcellID: number, xlcell: XLCellDB) {
    // list of xlcells is truncated of xlcell before the delete
    this.xlcells = this.xlcells.filter(h => h !== xlcell);

    this.xlcellService.deleteXLCell(xlcellID).subscribe(
      xlcell => {
        this.xlcellService.XLCellServiceChanged.next("delete")
      }
    );
  }

  editXLCell(xlcellID: number, xlcell: XLCellDB) {

  }

  // display xlcell in router
  displayXLCellInRouter(xlcellID: number) {
    this.router.navigate(["github_com_fullstack_lang_gongxlsx_go-" + "xlcell-display", xlcellID])
  }

  // set editor outlet
  setEditorRouterOutlet(xlcellID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gongxlsx_go_editor: ["github_com_fullstack_lang_gongxlsx_go-" + "xlcell-detail", xlcellID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(xlcellID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gongxlsx_go_presentation: ["github_com_fullstack_lang_gongxlsx_go-" + "xlcell-presentation", xlcellID]
      }
    }]);
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.xlcells.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.xlcells.forEach(row => this.selection.select(row));
  }

  save() {

    let toUpdate = new Set<XLCellDB>()

    // reset all initial selection of xlcell that belong to xlcell through Anarrayofb
    this.initialSelection.forEach(
      xlcell => {
        xlcell[this.dialogData.ReversePointer].Int64 = 0
        xlcell[this.dialogData.ReversePointer].Valid = true
        toUpdate.add(xlcell)
      }
    )

    // from selection, set xlcell that belong to xlcell through Anarrayofb
    this.selection.selected.forEach(
      xlcell => {
        let ID = +this.dialogData.ID
        xlcell[this.dialogData.ReversePointer].Int64 = ID
        xlcell[this.dialogData.ReversePointer].Valid = true
        toUpdate.add(xlcell)
      }
    )

    // update all xlcell (only update selection & initial selection)
    toUpdate.forEach(
      xlcell => {
        this.xlcellService.updateXLCell(xlcell)
          .subscribe(xlcell => {
            this.xlcellService.XLCellServiceChanged.next("update")
          });
      }
    )
    this.dialogRef.close('Pizza!');
  }
}
