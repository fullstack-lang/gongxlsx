// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { DisplaySelectionDB } from './displayselection-db'
import { DisplaySelection, CopyDisplaySelectionToDisplaySelectionDB } from './displayselection'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { XLFileDB } from './xlfile-db'
import { XLSheetDB } from './xlsheet-db'

@Injectable({
  providedIn: 'root'
})
export class DisplaySelectionService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  DisplaySelectionServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private displayselectionsUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.displayselectionsUrl = origin + '/api/github.com/fullstack-lang/gongxlsx/go/v1/displayselections';
  }

  /** GET displayselections from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<DisplaySelectionDB[]> {
    return this.getDisplaySelections(GONG__StackPath, frontRepo)
  }
  getDisplaySelections(GONG__StackPath: string, frontRepo: FrontRepo): Observable<DisplaySelectionDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<DisplaySelectionDB[]>(this.displayselectionsUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<DisplaySelectionDB[]>('getDisplaySelections', []))
      );
  }

  /** GET displayselection by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DisplaySelectionDB> {
    return this.getDisplaySelection(id, GONG__StackPath, frontRepo)
  }
  getDisplaySelection(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DisplaySelectionDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.displayselectionsUrl}/${id}`;
    return this.http.get<DisplaySelectionDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched displayselection id=${id}`)),
      catchError(this.handleError<DisplaySelectionDB>(`getDisplaySelection id=${id}`))
    );
  }

  // postFront copy displayselection to a version with encoded pointers and post to the back
  postFront(displayselection: DisplaySelection, GONG__StackPath: string): Observable<DisplaySelectionDB> {
    let displayselectionDB = new DisplaySelectionDB
    CopyDisplaySelectionToDisplaySelectionDB(displayselection, displayselectionDB)
    const id = typeof displayselectionDB === 'number' ? displayselectionDB : displayselectionDB.ID
    const url = `${this.displayselectionsUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<DisplaySelectionDB>(url, displayselectionDB, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<DisplaySelectionDB>('postDisplaySelection'))
    );
  }
  
  /** POST: add a new displayselection to the server */
  post(displayselectiondb: DisplaySelectionDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DisplaySelectionDB> {
    return this.postDisplaySelection(displayselectiondb, GONG__StackPath, frontRepo)
  }
  postDisplaySelection(displayselectiondb: DisplaySelectionDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DisplaySelectionDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    if (displayselectiondb.XLFile != undefined) {
      displayselectiondb.DisplaySelectionPointersEncoding.XLFileID.Int64 = displayselectiondb.XLFile.ID
      displayselectiondb.DisplaySelectionPointersEncoding.XLFileID.Valid = true
    }
    displayselectiondb.XLFile = undefined
    if (displayselectiondb.XLSheet != undefined) {
      displayselectiondb.DisplaySelectionPointersEncoding.XLSheetID.Int64 = displayselectiondb.XLSheet.ID
      displayselectiondb.DisplaySelectionPointersEncoding.XLSheetID.Valid = true
    }
    displayselectiondb.XLSheet = undefined

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<DisplaySelectionDB>(this.displayselectionsUrl, displayselectiondb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        displayselectiondb.XLFile = frontRepo.XLFiles.get(displayselectiondb.DisplaySelectionPointersEncoding.XLFileID.Int64)
        displayselectiondb.XLSheet = frontRepo.XLSheets.get(displayselectiondb.DisplaySelectionPointersEncoding.XLSheetID.Int64)
        // this.log(`posted displayselectiondb id=${displayselectiondb.ID}`)
      }),
      catchError(this.handleError<DisplaySelectionDB>('postDisplaySelection'))
    );
  }

  /** DELETE: delete the displayselectiondb from the server */
  delete(displayselectiondb: DisplaySelectionDB | number, GONG__StackPath: string): Observable<DisplaySelectionDB> {
    return this.deleteDisplaySelection(displayselectiondb, GONG__StackPath)
  }
  deleteDisplaySelection(displayselectiondb: DisplaySelectionDB | number, GONG__StackPath: string): Observable<DisplaySelectionDB> {
    const id = typeof displayselectiondb === 'number' ? displayselectiondb : displayselectiondb.ID;
    const url = `${this.displayselectionsUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<DisplaySelectionDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted displayselectiondb id=${id}`)),
      catchError(this.handleError<DisplaySelectionDB>('deleteDisplaySelection'))
    );
  }

  // updateFront copy displayselection to a version with encoded pointers and update to the back
  updateFront(displayselection: DisplaySelection, GONG__StackPath: string): Observable<DisplaySelectionDB> {
    let displayselectionDB = new DisplaySelectionDB
    CopyDisplaySelectionToDisplaySelectionDB(displayselection, displayselectionDB)
    const id = typeof displayselectionDB === 'number' ? displayselectionDB : displayselectionDB.ID
    const url = `${this.displayselectionsUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<DisplaySelectionDB>(url, displayselectionDB, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<DisplaySelectionDB>('updateDisplaySelection'))
    );
  }

  /** PUT: update the displayselectiondb on the server */
  update(displayselectiondb: DisplaySelectionDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DisplaySelectionDB> {
    return this.updateDisplaySelection(displayselectiondb, GONG__StackPath, frontRepo)
  }
  updateDisplaySelection(displayselectiondb: DisplaySelectionDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<DisplaySelectionDB> {
    const id = typeof displayselectiondb === 'number' ? displayselectiondb : displayselectiondb.ID;
    const url = `${this.displayselectionsUrl}/${id}`;

    // insertion point for reset of pointers (to avoid circular JSON)
    // and encoding of pointers
    if (displayselectiondb.XLFile != undefined) {
      displayselectiondb.DisplaySelectionPointersEncoding.XLFileID.Int64 = displayselectiondb.XLFile.ID
      displayselectiondb.DisplaySelectionPointersEncoding.XLFileID.Valid = true
    }
    displayselectiondb.XLFile = undefined
    if (displayselectiondb.XLSheet != undefined) {
      displayselectiondb.DisplaySelectionPointersEncoding.XLSheetID.Int64 = displayselectiondb.XLSheet.ID
      displayselectiondb.DisplaySelectionPointersEncoding.XLSheetID.Valid = true
    }
    displayselectiondb.XLSheet = undefined

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<DisplaySelectionDB>(url, displayselectiondb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        displayselectiondb.XLFile = frontRepo.XLFiles.get(displayselectiondb.DisplaySelectionPointersEncoding.XLFileID.Int64)
        displayselectiondb.XLSheet = frontRepo.XLSheets.get(displayselectiondb.DisplaySelectionPointersEncoding.XLSheetID.Int64)
        // this.log(`updated displayselectiondb id=${displayselectiondb.ID}`)
      }),
      catchError(this.handleError<DisplaySelectionDB>('updateDisplaySelection'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in DisplaySelectionService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("DisplaySelectionService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
