// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { XLFileDB } from './xlfile-db';

// insertion point for imports

@Injectable({
  providedIn: 'root'
})
export class XLFileService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  XLFileServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private xlfilesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.xlfilesUrl = origin + '/api/github.com/fullstack-lang/gongxlsx/go/v1/xlfiles';
  }

  /** GET xlfiles from the server */
  getXLFiles(GONG__StackPath: string = ""): Observable<XLFileDB[]> {

	let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<XLFileDB[]>(this.xlfilesUrl, { params: params })
      .pipe(
        tap(_ => this.log('fetched xlfiles')),
        catchError(this.handleError<XLFileDB[]>('getXLFiles', []))
      );
  }

  /** GET xlfile by id. Will 404 if id not found */
  getXLFile(id: number): Observable<XLFileDB> {
    const url = `${this.xlfilesUrl}/${id}`;
    return this.http.get<XLFileDB>(url).pipe(
      tap(_ => this.log(`fetched xlfile id=${id}`)),
      catchError(this.handleError<XLFileDB>(`getXLFile id=${id}`))
    );
  }

  /** POST: add a new xlfile to the server */
  postXLFile(xlfiledb: XLFileDB, GONG__StackPath: string): Observable<XLFileDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    xlfiledb.Sheets = []

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

	return this.http.post<XLFileDB>(this.xlfilesUrl, xlfiledb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        this.log(`posted xlfiledb id=${xlfiledb.ID}`)
      }),
      catchError(this.handleError<XLFileDB>('postXLFile'))
    );
  }

  /** DELETE: delete the xlfiledb from the server */
  deleteXLFile(xlfiledb: XLFileDB | number, GONG__StackPath: string): Observable<XLFileDB> {
    const id = typeof xlfiledb === 'number' ? xlfiledb : xlfiledb.ID;
    const url = `${this.xlfilesUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<XLFileDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted xlfiledb id=${id}`)),
      catchError(this.handleError<XLFileDB>('deleteXLFile'))
    );
  }

  /** PUT: update the xlfiledb on the server */
  updateXLFile(xlfiledb: XLFileDB, GONG__StackPath: string): Observable<XLFileDB> {
    const id = typeof xlfiledb === 'number' ? xlfiledb : xlfiledb.ID;
    const url = `${this.xlfilesUrl}/${id}`;

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    xlfiledb.Sheets = []

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<XLFileDB>(url, xlfiledb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        this.log(`updated xlfiledb id=${xlfiledb.ID}`)
      }),
      catchError(this.handleError<XLFileDB>('updateXLFile'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
