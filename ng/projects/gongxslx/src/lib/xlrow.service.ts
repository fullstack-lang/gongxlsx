// generated by MultiCodeGeneratorNgService
import { Injectable } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { XLRowAPI } from './xlrow-api';
import { XLRowDB } from './xlrow-db';

@Injectable({
  providedIn: 'root'
})
export class XLRowService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  XLRowServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private xlrowsUrl = 'http://localhost:8080/api/github.com/fullstack-lang/gongxslx/go/v1/xlrows';

  constructor(
    private http: HttpClient
  ) { }

  /** GET xlrows from the server */
  getXLRows(): Observable<XLRowDB[]> {
    return this.http.get<XLRowDB[]>(this.xlrowsUrl)
      .pipe(
        tap(_ => this.log('fetched xlrows')),
        catchError(this.handleError<XLRowDB[]>('getXLRows', []))
      );
  }

  /** GET xlrow by id. Will 404 if id not found */
  getXLRow(id: number): Observable<XLRowDB> {
    const url = `${this.xlrowsUrl}/${id}`;
    return this.http.get<XLRowDB>(url).pipe(
      tap(_ => this.log(`fetched xlrow id=${id}`)),
      catchError(this.handleError<XLRowDB>(`getXLRow id=${id}`))
    );
  }

  //////// Save methods //////////

  /** POST: add a new xlrow to the server */
  postXLRow(xlrowdb: XLRowDB): Observable<XLRowDB> {

		// insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    let _XLSheet_Rows_reverse = xlrowdb.XLSheet_Rows_reverse
    xlrowdb.XLSheet_Rows_reverse = {}

		return this.http.post<XLRowDB>(this.xlrowsUrl, xlrowdb, this.httpOptions).pipe(
			tap(_ => {
				// insertion point for restoration of reverse pointers
        xlrowdb.XLSheet_Rows_reverse = _XLSheet_Rows_reverse
				this.log(`posted xlrowdb id=${xlrowdb.ID}`)
			}),
			catchError(this.handleError<XLRowDB>('postXLRow'))
		);
  }

  /** DELETE: delete the xlrowdb from the server */
  deleteXLRow(xlrowdb: XLRowDB | number): Observable<XLRowDB> {
    const id = typeof xlrowdb === 'number' ? xlrowdb : xlrowdb.ID;
    const url = `${this.xlrowsUrl}/${id}`;

    return this.http.delete<XLRowDB>(url, this.httpOptions).pipe(
      tap(_ => this.log(`deleted xlrowdb id=${id}`)),
      catchError(this.handleError<XLRowDB>('deleteXLRow'))
    );
  }

  /** PUT: update the xlrowdb on the server */
  updateXLRow(xlrowdb: XLRowDB): Observable<XLRowDB> {
    const id = typeof xlrowdb === 'number' ? xlrowdb : xlrowdb.ID;
    const url = `${this.xlrowsUrl}/${id}`;

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    let _XLSheet_Rows_reverse = xlrowdb.XLSheet_Rows_reverse
    xlrowdb.XLSheet_Rows_reverse = {}

    return this.http.put(url, xlrowdb, this.httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        xlrowdb.XLSheet_Rows_reverse = _XLSheet_Rows_reverse
        this.log(`updated xlrowdb id=${xlrowdb.ID}`)
      }),
      catchError(this.handleError<XLRowDB>('updateXLRow'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {

  }
}
