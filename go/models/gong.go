// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	XLFiles map[*XLFile]struct{}

	XLRows map[*XLRow]struct{}

	XLSheets map[*XLSheet]struct{}

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface
	
	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	// insertion point for Commit and Checkout signatures
	CommitXLFile(xlfile *XLFile)
	CheckoutXLFile(xlfile *XLFile)
	CommitXLRow(xlrow *XLRow)
	CheckoutXLRow(xlrow *XLRow)
	CommitXLSheet(xlsheet *XLSheet)
	CheckoutXLSheet(xlsheet *XLSheet)
	GetLastCommitNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	XLFiles: make(map[*XLFile]struct{}, 0),

	XLRows: make(map[*XLRow]struct{}, 0),

	XLSheets: make(map[*XLSheet]struct{}, 0),

}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getXLFileOrderedStructWithNameField() []*XLFile {
	// have alphabetical order generation
	xlfileOrdered := []*XLFile{}
	for xlfile := range stage.XLFiles {
		xlfileOrdered = append(xlfileOrdered, xlfile)
	}
	sort.Slice(xlfileOrdered[:], func(i, j int) bool {
		return xlfileOrdered[i].Name < xlfileOrdered[j].Name
	})
	return xlfileOrdered
}

// Stage puts xlfile to the model stage
func (xlfile *XLFile) Stage() *XLFile {
	Stage.XLFiles[xlfile] = __member
	return xlfile
}

// Unstage removes xlfile off the model stage
func (xlfile *XLFile) Unstage() *XLFile {
	delete(Stage.XLFiles, xlfile)
	return xlfile
}

// commit xlfile to the back repo (if it is already staged)
func (xlfile *XLFile) Commit() *XLFile {
	if _, ok := Stage.XLFiles[xlfile]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLFile(xlfile)
		}
	}
	return xlfile
}

// Checkout xlfile to the back repo (if it is already staged)
func (xlfile *XLFile) Checkout() *XLFile {
	if _, ok := Stage.XLFiles[xlfile]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLFile(xlfile)
		}
	}
	return xlfile
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlfile to the model stage
func (xlfile *XLFile) StageCopy() *XLFile {
	_xlfile := new(XLFile)
	*_xlfile = *xlfile
	_xlfile.Stage()
	return _xlfile
}

// StageAndCommit appends xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) StageAndCommit() *XLFile {
	xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
	return xlfile
}

// DeleteStageAndCommit appends xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) DeleteStageAndCommit() *XLFile {
	xlfile.Unstage()
	DeleteORMXLFile(xlfile)
	return xlfile
}

// StageCopyAndCommit appends a copy of xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) StageCopyAndCommit() *XLFile {
	_xlfile := new(XLFile)
	*_xlfile = *xlfile
	_xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
	return _xlfile
}

// CreateORMXLFile enables dynamic staging of a XLFile instance
func CreateORMXLFile(xlfile *XLFile) {
	xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
}

// DeleteORMXLFile enables dynamic staging of a XLFile instance
func DeleteORMXLFile(xlfile *XLFile) {
	xlfile.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLFile(xlfile)
	}
}

func (stage *StageStruct) getXLRowOrderedStructWithNameField() []*XLRow {
	// have alphabetical order generation
	xlrowOrdered := []*XLRow{}
	for xlrow := range stage.XLRows {
		xlrowOrdered = append(xlrowOrdered, xlrow)
	}
	sort.Slice(xlrowOrdered[:], func(i, j int) bool {
		return xlrowOrdered[i].Name < xlrowOrdered[j].Name
	})
	return xlrowOrdered
}

// Stage puts xlrow to the model stage
func (xlrow *XLRow) Stage() *XLRow {
	Stage.XLRows[xlrow] = __member
	return xlrow
}

// Unstage removes xlrow off the model stage
func (xlrow *XLRow) Unstage() *XLRow {
	delete(Stage.XLRows, xlrow)
	return xlrow
}

// commit xlrow to the back repo (if it is already staged)
func (xlrow *XLRow) Commit() *XLRow {
	if _, ok := Stage.XLRows[xlrow]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLRow(xlrow)
		}
	}
	return xlrow
}

// Checkout xlrow to the back repo (if it is already staged)
func (xlrow *XLRow) Checkout() *XLRow {
	if _, ok := Stage.XLRows[xlrow]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLRow(xlrow)
		}
	}
	return xlrow
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlrow to the model stage
func (xlrow *XLRow) StageCopy() *XLRow {
	_xlrow := new(XLRow)
	*_xlrow = *xlrow
	_xlrow.Stage()
	return _xlrow
}

// StageAndCommit appends xlrow to the model stage and commit to the orm repo
func (xlrow *XLRow) StageAndCommit() *XLRow {
	xlrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLRow(xlrow)
	}
	return xlrow
}

// DeleteStageAndCommit appends xlrow to the model stage and commit to the orm repo
func (xlrow *XLRow) DeleteStageAndCommit() *XLRow {
	xlrow.Unstage()
	DeleteORMXLRow(xlrow)
	return xlrow
}

// StageCopyAndCommit appends a copy of xlrow to the model stage and commit to the orm repo
func (xlrow *XLRow) StageCopyAndCommit() *XLRow {
	_xlrow := new(XLRow)
	*_xlrow = *xlrow
	_xlrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLRow(xlrow)
	}
	return _xlrow
}

// CreateORMXLRow enables dynamic staging of a XLRow instance
func CreateORMXLRow(xlrow *XLRow) {
	xlrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLRow(xlrow)
	}
}

// DeleteORMXLRow enables dynamic staging of a XLRow instance
func DeleteORMXLRow(xlrow *XLRow) {
	xlrow.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLRow(xlrow)
	}
}

func (stage *StageStruct) getXLSheetOrderedStructWithNameField() []*XLSheet {
	// have alphabetical order generation
	xlsheetOrdered := []*XLSheet{}
	for xlsheet := range stage.XLSheets {
		xlsheetOrdered = append(xlsheetOrdered, xlsheet)
	}
	sort.Slice(xlsheetOrdered[:], func(i, j int) bool {
		return xlsheetOrdered[i].Name < xlsheetOrdered[j].Name
	})
	return xlsheetOrdered
}

// Stage puts xlsheet to the model stage
func (xlsheet *XLSheet) Stage() *XLSheet {
	Stage.XLSheets[xlsheet] = __member
	return xlsheet
}

// Unstage removes xlsheet off the model stage
func (xlsheet *XLSheet) Unstage() *XLSheet {
	delete(Stage.XLSheets, xlsheet)
	return xlsheet
}

// commit xlsheet to the back repo (if it is already staged)
func (xlsheet *XLSheet) Commit() *XLSheet {
	if _, ok := Stage.XLSheets[xlsheet]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLSheet(xlsheet)
		}
	}
	return xlsheet
}

// Checkout xlsheet to the back repo (if it is already staged)
func (xlsheet *XLSheet) Checkout() *XLSheet {
	if _, ok := Stage.XLSheets[xlsheet]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLSheet(xlsheet)
		}
	}
	return xlsheet
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlsheet to the model stage
func (xlsheet *XLSheet) StageCopy() *XLSheet {
	_xlsheet := new(XLSheet)
	*_xlsheet = *xlsheet
	_xlsheet.Stage()
	return _xlsheet
}

// StageAndCommit appends xlsheet to the model stage and commit to the orm repo
func (xlsheet *XLSheet) StageAndCommit() *XLSheet {
	xlsheet.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLSheet(xlsheet)
	}
	return xlsheet
}

// DeleteStageAndCommit appends xlsheet to the model stage and commit to the orm repo
func (xlsheet *XLSheet) DeleteStageAndCommit() *XLSheet {
	xlsheet.Unstage()
	DeleteORMXLSheet(xlsheet)
	return xlsheet
}

// StageCopyAndCommit appends a copy of xlsheet to the model stage and commit to the orm repo
func (xlsheet *XLSheet) StageCopyAndCommit() *XLSheet {
	_xlsheet := new(XLSheet)
	*_xlsheet = *xlsheet
	_xlsheet.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLSheet(xlsheet)
	}
	return _xlsheet
}

// CreateORMXLSheet enables dynamic staging of a XLSheet instance
func CreateORMXLSheet(xlsheet *XLSheet) {
	xlsheet.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLSheet(xlsheet)
	}
}

// DeleteORMXLSheet enables dynamic staging of a XLSheet instance
func DeleteORMXLSheet(xlsheet *XLSheet) {
	xlsheet.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLSheet(xlsheet)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMXLFile(XLFile *XLFile)
	CreateORMXLRow(XLRow *XLRow)
	CreateORMXLSheet(XLSheet *XLSheet)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMXLFile(XLFile *XLFile)
	DeleteORMXLRow(XLRow *XLRow)
	DeleteORMXLSheet(XLSheet *XLSheet)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.XLFiles = make(map[*XLFile]struct{}, 0)
	stage.XLRows = make(map[*XLRow]struct{}, 0)
	stage.XLSheets = make(map[*XLSheet]struct{}, 0)
}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.XLFiles = nil
	stage.XLRows = nil
	stage.XLSheets = nil
}
