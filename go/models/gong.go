// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Xslxs map[*Xslx]struct{}

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface
	
	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	// insertion point for Commit and Checkout signatures
	CommitXslx(xslx *Xslx)
	CheckoutXslx(xslx *Xslx)
	GetLastCommitNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Xslxs: make(map[*Xslx]struct{}, 0),

}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getXslxOrderedStructWithNameField() []*Xslx {
	// have alphabetical order generation
	xslxOrdered := []*Xslx{}
	for xslx := range stage.Xslxs {
		xslxOrdered = append(xslxOrdered, xslx)
	}
	sort.Slice(xslxOrdered[:], func(i, j int) bool {
		return xslxOrdered[i].Name < xslxOrdered[j].Name
	})
	return xslxOrdered
}

// Stage puts xslx to the model stage
func (xslx *Xslx) Stage() *Xslx {
	Stage.Xslxs[xslx] = __member
	return xslx
}

// Unstage removes xslx off the model stage
func (xslx *Xslx) Unstage() *Xslx {
	delete(Stage.Xslxs, xslx)
	return xslx
}

// commit xslx to the back repo (if it is already staged)
func (xslx *Xslx) Commit() *Xslx {
	if _, ok := Stage.Xslxs[xslx]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXslx(xslx)
		}
	}
	return xslx
}

// Checkout xslx to the back repo (if it is already staged)
func (xslx *Xslx) Checkout() *Xslx {
	if _, ok := Stage.Xslxs[xslx]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXslx(xslx)
		}
	}
	return xslx
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xslx to the model stage
func (xslx *Xslx) StageCopy() *Xslx {
	_xslx := new(Xslx)
	*_xslx = *xslx
	_xslx.Stage()
	return _xslx
}

// StageAndCommit appends xslx to the model stage and commit to the orm repo
func (xslx *Xslx) StageAndCommit() *Xslx {
	xslx.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXslx(xslx)
	}
	return xslx
}

// DeleteStageAndCommit appends xslx to the model stage and commit to the orm repo
func (xslx *Xslx) DeleteStageAndCommit() *Xslx {
	xslx.Unstage()
	DeleteORMXslx(xslx)
	return xslx
}

// StageCopyAndCommit appends a copy of xslx to the model stage and commit to the orm repo
func (xslx *Xslx) StageCopyAndCommit() *Xslx {
	_xslx := new(Xslx)
	*_xslx = *xslx
	_xslx.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXslx(xslx)
	}
	return _xslx
}

// CreateORMXslx enables dynamic staging of a Xslx instance
func CreateORMXslx(xslx *Xslx) {
	xslx.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXslx(xslx)
	}
}

// DeleteORMXslx enables dynamic staging of a Xslx instance
func DeleteORMXslx(xslx *Xslx) {
	xslx.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXslx(xslx)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMXslx(Xslx *Xslx)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMXslx(Xslx *Xslx)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Xslxs = make(map[*Xslx]struct{}, 0)
}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Xslxs = nil
}
