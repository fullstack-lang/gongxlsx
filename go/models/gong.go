// generated by ModelGongFileTemplate
package models

import (
	"errors"
	"fmt"
)

// errUnkownEnum is returns when a value cannot match enum values
var errUnkownEnum = errors.New("unkown enum")

// needed to avoid when fmt package is not needed by generated code
var __dummy__fmt_variable fmt.Scanner

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	DisplaySelections           map[*DisplaySelection]any
	DisplaySelections_mapString map[string]*DisplaySelection

	OnAfterDisplaySelectionCreateCallback OnAfterCreateInterface[DisplaySelection]
	OnAfterDisplaySelectionUpdateCallback OnAfterUpdateInterface[DisplaySelection]
	OnAfterDisplaySelectionDeleteCallback OnAfterDeleteInterface[DisplaySelection]
	OnAfterDisplaySelectionReadCallback   OnAfterReadInterface[DisplaySelection]

	XLCells           map[*XLCell]any
	XLCells_mapString map[string]*XLCell

	OnAfterXLCellCreateCallback OnAfterCreateInterface[XLCell]
	OnAfterXLCellUpdateCallback OnAfterUpdateInterface[XLCell]
	OnAfterXLCellDeleteCallback OnAfterDeleteInterface[XLCell]
	OnAfterXLCellReadCallback   OnAfterReadInterface[XLCell]

	XLFiles           map[*XLFile]any
	XLFiles_mapString map[string]*XLFile

	OnAfterXLFileCreateCallback OnAfterCreateInterface[XLFile]
	OnAfterXLFileUpdateCallback OnAfterUpdateInterface[XLFile]
	OnAfterXLFileDeleteCallback OnAfterDeleteInterface[XLFile]
	OnAfterXLFileReadCallback   OnAfterReadInterface[XLFile]

	XLRows           map[*XLRow]any
	XLRows_mapString map[string]*XLRow

	OnAfterXLRowCreateCallback OnAfterCreateInterface[XLRow]
	OnAfterXLRowUpdateCallback OnAfterUpdateInterface[XLRow]
	OnAfterXLRowDeleteCallback OnAfterDeleteInterface[XLRow]
	OnAfterXLRowReadCallback   OnAfterReadInterface[XLRow]

	XLSheets           map[*XLSheet]any
	XLSheets_mapString map[string]*XLSheet

	OnAfterXLSheetCreateCallback OnAfterCreateInterface[XLSheet]
	OnAfterXLSheetUpdateCallback OnAfterUpdateInterface[XLSheet]
	OnAfterXLSheetDeleteCallback OnAfterDeleteInterface[XLSheet]
	OnAfterXLSheetReadCallback   OnAfterReadInterface[XLSheet]

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int

	// store meta package import
	MetaPackageImportPath  string
	MetaPackageImportAlias string
	Map_DocLink_Renaming   map[string]GONG__Identifier
}

// swagger:ignore
type GONG__Identifier struct {
	Ident string
	Type  GONG__ExpressionType
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

// OnAfterCreateInterface callback when an instance is updated from the front
type OnAfterCreateInterface[Type Gongstruct] interface {
	OnAfterCreate(stage *StageStruct,
		instance *Type)
}

// OnAfterReadInterface callback when an instance is updated from the front
type OnAfterReadInterface[Type Gongstruct] interface {
	OnAfterRead(stage *StageStruct,
		instance *Type)
}

// OnAfterUpdateInterface callback when an instance is updated from the front
type OnAfterUpdateInterface[Type Gongstruct] interface {
	OnAfterUpdate(stage *StageStruct, old, new *Type)
}

// OnAfterDeleteInterface callback when an instance is updated from the front
type OnAfterDeleteInterface[Type Gongstruct] interface {
	OnAfterDelete(stage *StageStruct,
		staged, front *Type)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitDisplaySelection(displayselection *DisplaySelection)
	CheckoutDisplaySelection(displayselection *DisplaySelection)
	CommitXLCell(xlcell *XLCell)
	CheckoutXLCell(xlcell *XLCell)
	CommitXLFile(xlfile *XLFile)
	CheckoutXLFile(xlfile *XLFile)
	CommitXLRow(xlrow *XLRow)
	CheckoutXLRow(xlrow *XLRow)
	CommitXLSheet(xlsheet *XLSheet)
	CheckoutXLSheet(xlsheet *XLSheet)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	DisplaySelections:           make(map[*DisplaySelection]any),
	DisplaySelections_mapString: make(map[string]*DisplaySelection),

	XLCells:           make(map[*XLCell]any),
	XLCells_mapString: make(map[string]*XLCell),

	XLFiles:           make(map[*XLFile]any),
	XLFiles_mapString: make(map[string]*XLFile),

	XLRows:           make(map[*XLRow]any),
	XLRows_mapString: make(map[string]*XLRow),

	XLSheets:           make(map[*XLSheet]any),
	XLSheets_mapString: make(map[string]*XLSheet),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["DisplaySelection"] = len(stage.DisplaySelections)
	stage.Map_GongStructName_InstancesNb["XLCell"] = len(stage.XLCells)
	stage.Map_GongStructName_InstancesNb["XLFile"] = len(stage.XLFiles)
	stage.Map_GongStructName_InstancesNb["XLRow"] = len(stage.XLRows)
	stage.Map_GongStructName_InstancesNb["XLSheet"] = len(stage.XLSheets)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["DisplaySelection"] = len(stage.DisplaySelections)
	stage.Map_GongStructName_InstancesNb["XLCell"] = len(stage.XLCells)
	stage.Map_GongStructName_InstancesNb["XLFile"] = len(stage.XLFiles)
	stage.Map_GongStructName_InstancesNb["XLRow"] = len(stage.XLRows)
	stage.Map_GongStructName_InstancesNb["XLSheet"] = len(stage.XLSheets)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts displayselection to the model stage
func (displayselection *DisplaySelection) Stage() *DisplaySelection {
	Stage.DisplaySelections[displayselection] = __member
	Stage.DisplaySelections_mapString[displayselection.Name] = displayselection

	return displayselection
}

// Unstage removes displayselection off the model stage
func (displayselection *DisplaySelection) Unstage() *DisplaySelection {
	delete(Stage.DisplaySelections, displayselection)
	delete(Stage.DisplaySelections_mapString, displayselection.Name)
	return displayselection
}

// commit displayselection to the back repo (if it is already staged)
func (displayselection *DisplaySelection) Commit() *DisplaySelection {
	if _, ok := Stage.DisplaySelections[displayselection]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitDisplaySelection(displayselection)
		}
	}
	return displayselection
}

// Checkout displayselection to the back repo (if it is already staged)
func (displayselection *DisplaySelection) Checkout() *DisplaySelection {
	if _, ok := Stage.DisplaySelections[displayselection]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutDisplaySelection(displayselection)
		}
	}
	return displayselection
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of displayselection to the model stage
func (displayselection *DisplaySelection) StageCopy() *DisplaySelection {
	_displayselection := new(DisplaySelection)
	*_displayselection = *displayselection
	_displayselection.Stage()
	return _displayselection
}

// StageAndCommit appends displayselection to the model stage and commit to the orm repo
func (displayselection *DisplaySelection) StageAndCommit() *DisplaySelection {
	displayselection.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDisplaySelection(displayselection)
	}
	return displayselection
}

// DeleteStageAndCommit appends displayselection to the model stage and commit to the orm repo
func (displayselection *DisplaySelection) DeleteStageAndCommit() *DisplaySelection {
	displayselection.Unstage()
	DeleteORMDisplaySelection(displayselection)
	return displayselection
}

// StageCopyAndCommit appends a copy of displayselection to the model stage and commit to the orm repo
func (displayselection *DisplaySelection) StageCopyAndCommit() *DisplaySelection {
	_displayselection := new(DisplaySelection)
	*_displayselection = *displayselection
	_displayselection.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDisplaySelection(displayselection)
	}
	return _displayselection
}

// CreateORMDisplaySelection enables dynamic staging of a DisplaySelection instance
func CreateORMDisplaySelection(displayselection *DisplaySelection) {
	displayselection.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDisplaySelection(displayselection)
	}
}

// DeleteORMDisplaySelection enables dynamic staging of a DisplaySelection instance
func DeleteORMDisplaySelection(displayselection *DisplaySelection) {
	displayselection.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMDisplaySelection(displayselection)
	}
}

// for satisfaction of GongStruct interface
func (displayselection *DisplaySelection) GetName() (res string) {
	return displayselection.Name
}

// Stage puts xlcell to the model stage
func (xlcell *XLCell) Stage() *XLCell {
	Stage.XLCells[xlcell] = __member
	Stage.XLCells_mapString[xlcell.Name] = xlcell

	return xlcell
}

// Unstage removes xlcell off the model stage
func (xlcell *XLCell) Unstage() *XLCell {
	delete(Stage.XLCells, xlcell)
	delete(Stage.XLCells_mapString, xlcell.Name)
	return xlcell
}

// commit xlcell to the back repo (if it is already staged)
func (xlcell *XLCell) Commit() *XLCell {
	if _, ok := Stage.XLCells[xlcell]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLCell(xlcell)
		}
	}
	return xlcell
}

// Checkout xlcell to the back repo (if it is already staged)
func (xlcell *XLCell) Checkout() *XLCell {
	if _, ok := Stage.XLCells[xlcell]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLCell(xlcell)
		}
	}
	return xlcell
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlcell to the model stage
func (xlcell *XLCell) StageCopy() *XLCell {
	_xlcell := new(XLCell)
	*_xlcell = *xlcell
	_xlcell.Stage()
	return _xlcell
}

// StageAndCommit appends xlcell to the model stage and commit to the orm repo
func (xlcell *XLCell) StageAndCommit() *XLCell {
	xlcell.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLCell(xlcell)
	}
	return xlcell
}

// DeleteStageAndCommit appends xlcell to the model stage and commit to the orm repo
func (xlcell *XLCell) DeleteStageAndCommit() *XLCell {
	xlcell.Unstage()
	DeleteORMXLCell(xlcell)
	return xlcell
}

// StageCopyAndCommit appends a copy of xlcell to the model stage and commit to the orm repo
func (xlcell *XLCell) StageCopyAndCommit() *XLCell {
	_xlcell := new(XLCell)
	*_xlcell = *xlcell
	_xlcell.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLCell(xlcell)
	}
	return _xlcell
}

// CreateORMXLCell enables dynamic staging of a XLCell instance
func CreateORMXLCell(xlcell *XLCell) {
	xlcell.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLCell(xlcell)
	}
}

// DeleteORMXLCell enables dynamic staging of a XLCell instance
func DeleteORMXLCell(xlcell *XLCell) {
	xlcell.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLCell(xlcell)
	}
}

// for satisfaction of GongStruct interface
func (xlcell *XLCell) GetName() (res string) {
	return xlcell.Name
}

// Stage puts xlfile to the model stage
func (xlfile *XLFile) Stage() *XLFile {
	Stage.XLFiles[xlfile] = __member
	Stage.XLFiles_mapString[xlfile.Name] = xlfile

	return xlfile
}

// Unstage removes xlfile off the model stage
func (xlfile *XLFile) Unstage() *XLFile {
	delete(Stage.XLFiles, xlfile)
	delete(Stage.XLFiles_mapString, xlfile.Name)
	return xlfile
}

// commit xlfile to the back repo (if it is already staged)
func (xlfile *XLFile) Commit() *XLFile {
	if _, ok := Stage.XLFiles[xlfile]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLFile(xlfile)
		}
	}
	return xlfile
}

// Checkout xlfile to the back repo (if it is already staged)
func (xlfile *XLFile) Checkout() *XLFile {
	if _, ok := Stage.XLFiles[xlfile]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLFile(xlfile)
		}
	}
	return xlfile
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlfile to the model stage
func (xlfile *XLFile) StageCopy() *XLFile {
	_xlfile := new(XLFile)
	*_xlfile = *xlfile
	_xlfile.Stage()
	return _xlfile
}

// StageAndCommit appends xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) StageAndCommit() *XLFile {
	xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
	return xlfile
}

// DeleteStageAndCommit appends xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) DeleteStageAndCommit() *XLFile {
	xlfile.Unstage()
	DeleteORMXLFile(xlfile)
	return xlfile
}

// StageCopyAndCommit appends a copy of xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) StageCopyAndCommit() *XLFile {
	_xlfile := new(XLFile)
	*_xlfile = *xlfile
	_xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
	return _xlfile
}

// CreateORMXLFile enables dynamic staging of a XLFile instance
func CreateORMXLFile(xlfile *XLFile) {
	xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
}

// DeleteORMXLFile enables dynamic staging of a XLFile instance
func DeleteORMXLFile(xlfile *XLFile) {
	xlfile.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLFile(xlfile)
	}
}

// for satisfaction of GongStruct interface
func (xlfile *XLFile) GetName() (res string) {
	return xlfile.Name
}

// Stage puts xlrow to the model stage
func (xlrow *XLRow) Stage() *XLRow {
	Stage.XLRows[xlrow] = __member
	Stage.XLRows_mapString[xlrow.Name] = xlrow

	return xlrow
}

// Unstage removes xlrow off the model stage
func (xlrow *XLRow) Unstage() *XLRow {
	delete(Stage.XLRows, xlrow)
	delete(Stage.XLRows_mapString, xlrow.Name)
	return xlrow
}

// commit xlrow to the back repo (if it is already staged)
func (xlrow *XLRow) Commit() *XLRow {
	if _, ok := Stage.XLRows[xlrow]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLRow(xlrow)
		}
	}
	return xlrow
}

// Checkout xlrow to the back repo (if it is already staged)
func (xlrow *XLRow) Checkout() *XLRow {
	if _, ok := Stage.XLRows[xlrow]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLRow(xlrow)
		}
	}
	return xlrow
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlrow to the model stage
func (xlrow *XLRow) StageCopy() *XLRow {
	_xlrow := new(XLRow)
	*_xlrow = *xlrow
	_xlrow.Stage()
	return _xlrow
}

// StageAndCommit appends xlrow to the model stage and commit to the orm repo
func (xlrow *XLRow) StageAndCommit() *XLRow {
	xlrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLRow(xlrow)
	}
	return xlrow
}

// DeleteStageAndCommit appends xlrow to the model stage and commit to the orm repo
func (xlrow *XLRow) DeleteStageAndCommit() *XLRow {
	xlrow.Unstage()
	DeleteORMXLRow(xlrow)
	return xlrow
}

// StageCopyAndCommit appends a copy of xlrow to the model stage and commit to the orm repo
func (xlrow *XLRow) StageCopyAndCommit() *XLRow {
	_xlrow := new(XLRow)
	*_xlrow = *xlrow
	_xlrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLRow(xlrow)
	}
	return _xlrow
}

// CreateORMXLRow enables dynamic staging of a XLRow instance
func CreateORMXLRow(xlrow *XLRow) {
	xlrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLRow(xlrow)
	}
}

// DeleteORMXLRow enables dynamic staging of a XLRow instance
func DeleteORMXLRow(xlrow *XLRow) {
	xlrow.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLRow(xlrow)
	}
}

// for satisfaction of GongStruct interface
func (xlrow *XLRow) GetName() (res string) {
	return xlrow.Name
}

// Stage puts xlsheet to the model stage
func (xlsheet *XLSheet) Stage() *XLSheet {
	Stage.XLSheets[xlsheet] = __member
	Stage.XLSheets_mapString[xlsheet.Name] = xlsheet

	return xlsheet
}

// Unstage removes xlsheet off the model stage
func (xlsheet *XLSheet) Unstage() *XLSheet {
	delete(Stage.XLSheets, xlsheet)
	delete(Stage.XLSheets_mapString, xlsheet.Name)
	return xlsheet
}

// commit xlsheet to the back repo (if it is already staged)
func (xlsheet *XLSheet) Commit() *XLSheet {
	if _, ok := Stage.XLSheets[xlsheet]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLSheet(xlsheet)
		}
	}
	return xlsheet
}

// Checkout xlsheet to the back repo (if it is already staged)
func (xlsheet *XLSheet) Checkout() *XLSheet {
	if _, ok := Stage.XLSheets[xlsheet]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLSheet(xlsheet)
		}
	}
	return xlsheet
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlsheet to the model stage
func (xlsheet *XLSheet) StageCopy() *XLSheet {
	_xlsheet := new(XLSheet)
	*_xlsheet = *xlsheet
	_xlsheet.Stage()
	return _xlsheet
}

// StageAndCommit appends xlsheet to the model stage and commit to the orm repo
func (xlsheet *XLSheet) StageAndCommit() *XLSheet {
	xlsheet.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLSheet(xlsheet)
	}
	return xlsheet
}

// DeleteStageAndCommit appends xlsheet to the model stage and commit to the orm repo
func (xlsheet *XLSheet) DeleteStageAndCommit() *XLSheet {
	xlsheet.Unstage()
	DeleteORMXLSheet(xlsheet)
	return xlsheet
}

// StageCopyAndCommit appends a copy of xlsheet to the model stage and commit to the orm repo
func (xlsheet *XLSheet) StageCopyAndCommit() *XLSheet {
	_xlsheet := new(XLSheet)
	*_xlsheet = *xlsheet
	_xlsheet.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLSheet(xlsheet)
	}
	return _xlsheet
}

// CreateORMXLSheet enables dynamic staging of a XLSheet instance
func CreateORMXLSheet(xlsheet *XLSheet) {
	xlsheet.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLSheet(xlsheet)
	}
}

// DeleteORMXLSheet enables dynamic staging of a XLSheet instance
func DeleteORMXLSheet(xlsheet *XLSheet) {
	xlsheet.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLSheet(xlsheet)
	}
}

// for satisfaction of GongStruct interface
func (xlsheet *XLSheet) GetName() (res string) {
	return xlsheet.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMDisplaySelection(DisplaySelection *DisplaySelection)
	CreateORMXLCell(XLCell *XLCell)
	CreateORMXLFile(XLFile *XLFile)
	CreateORMXLRow(XLRow *XLRow)
	CreateORMXLSheet(XLSheet *XLSheet)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMDisplaySelection(DisplaySelection *DisplaySelection)
	DeleteORMXLCell(XLCell *XLCell)
	DeleteORMXLFile(XLFile *XLFile)
	DeleteORMXLRow(XLRow *XLRow)
	DeleteORMXLSheet(XLSheet *XLSheet)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.DisplaySelections = make(map[*DisplaySelection]any)
	stage.DisplaySelections_mapString = make(map[string]*DisplaySelection)

	stage.XLCells = make(map[*XLCell]any)
	stage.XLCells_mapString = make(map[string]*XLCell)

	stage.XLFiles = make(map[*XLFile]any)
	stage.XLFiles_mapString = make(map[string]*XLFile)

	stage.XLRows = make(map[*XLRow]any)
	stage.XLRows_mapString = make(map[string]*XLRow)

	stage.XLSheets = make(map[*XLSheet]any)
	stage.XLSheets_mapString = make(map[string]*XLSheet)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.DisplaySelections = nil
	stage.DisplaySelections_mapString = nil

	stage.XLCells = nil
	stage.XLCells_mapString = nil

	stage.XLFiles = nil
	stage.XLFiles_mapString = nil

	stage.XLRows = nil
	stage.XLRows_mapString = nil

	stage.XLSheets = nil
	stage.XLSheets_mapString = nil

}

func (stage *StageStruct) Unstage() { // insertion point for array nil
	for displayselection := range stage.DisplaySelections {
		displayselection.Unstage()
	}

	for xlcell := range stage.XLCells {
		xlcell.Unstage()
	}

	for xlfile := range stage.XLFiles {
		xlfile.Unstage()
	}

	for xlrow := range stage.XLRows {
		xlrow.Unstage()
	}

	for xlsheet := range stage.XLSheets {
		xlsheet.Unstage()
	}

}

// insertion point of functions that provide maps for reverse associations

// generate function for reverse association maps of DisplaySelection
func (stageStruct *StageStruct) CreateReverseMap_DisplaySelection_XLFile() (res map[*XLFile][]*DisplaySelection) {
	res = make(map[*XLFile][]*DisplaySelection)

	for displayselection := range stageStruct.DisplaySelections {
		if displayselection.XLFile != nil {
			xlfile_ := displayselection.XLFile
			var displayselections []*DisplaySelection
			_, ok := res[xlfile_]
			if ok {
				displayselections = res[xlfile_]
			} else {
				displayselections = make([]*DisplaySelection, 0)
			}
			displayselections = append(displayselections, displayselection)
			res[xlfile_] = displayselections
		}
	}

	return
}
func (stageStruct *StageStruct) CreateReverseMap_DisplaySelection_XLSheet() (res map[*XLSheet][]*DisplaySelection) {
	res = make(map[*XLSheet][]*DisplaySelection)

	for displayselection := range stageStruct.DisplaySelections {
		if displayselection.XLSheet != nil {
			xlsheet_ := displayselection.XLSheet
			var displayselections []*DisplaySelection
			_, ok := res[xlsheet_]
			if ok {
				displayselections = res[xlsheet_]
			} else {
				displayselections = make([]*DisplaySelection, 0)
			}
			displayselections = append(displayselections, displayselection)
			res[xlsheet_] = displayselections
		}
	}

	return
}

// generate function for reverse association maps of XLCell

// generate function for reverse association maps of XLFile
func (stageStruct *StageStruct) CreateReverseMap_XLFile_Sheets() (res map[*XLSheet]*XLFile) {
	res = make(map[*XLSheet]*XLFile)

	for xlfile := range stageStruct.XLFiles {
		for _, xlsheet_ := range xlfile.Sheets {
			res[xlsheet_] = xlfile
		}
	}

	return
}


// generate function for reverse association maps of XLRow
func (stageStruct *StageStruct) CreateReverseMap_XLRow_Cells() (res map[*XLCell]*XLRow) {
	res = make(map[*XLCell]*XLRow)

	for xlrow := range stageStruct.XLRows {
		for _, xlcell_ := range xlrow.Cells {
			res[xlcell_] = xlrow
		}
	}

	return
}


// generate function for reverse association maps of XLSheet
func (stageStruct *StageStruct) CreateReverseMap_XLSheet_Rows() (res map[*XLRow]*XLSheet) {
	res = make(map[*XLRow]*XLSheet)

	for xlsheet := range stageStruct.XLSheets {
		for _, xlrow_ := range xlsheet.Rows {
			res[xlrow_] = xlsheet
		}
	}

	return
}

func (stageStruct *StageStruct) CreateReverseMap_XLSheet_SheetCells() (res map[*XLCell]*XLSheet) {
	res = make(map[*XLCell]*XLSheet)

	for xlsheet := range stageStruct.XLSheets {
		for _, xlcell_ := range xlsheet.SheetCells {
			res[xlcell_] = xlsheet
		}
	}

	return
}


// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	DisplaySelection | XLCell | XLFile | XLRow | XLSheet
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*DisplaySelection | *XLCell | *XLFile | *XLRow | *XLSheet
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*DisplaySelection]any |
		map[*XLCell]any |
		map[*XLFile]any |
		map[*XLRow]any |
		map[*XLSheet]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*DisplaySelection |
		map[string]*XLCell |
		map[string]*XLFile |
		map[string]*XLRow |
		map[string]*XLSheet |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*DisplaySelection]any:
		return any(&Stage.DisplaySelections).(*Type)
	case map[*XLCell]any:
		return any(&Stage.XLCells).(*Type)
	case map[*XLFile]any:
		return any(&Stage.XLFiles).(*Type)
	case map[*XLRow]any:
		return any(&Stage.XLRows).(*Type)
	case map[*XLSheet]any:
		return any(&Stage.XLSheets).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*DisplaySelection:
		return any(&Stage.DisplaySelections_mapString).(*Type)
	case map[string]*XLCell:
		return any(&Stage.XLCells_mapString).(*Type)
	case map[string]*XLFile:
		return any(&Stage.XLFiles_mapString).(*Type)
	case map[string]*XLRow:
		return any(&Stage.XLRows_mapString).(*Type)
	case map[string]*XLSheet:
		return any(&Stage.XLSheets_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct]() *map[*Type]any {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case DisplaySelection:
		return any(&Stage.DisplaySelections).(*map[*Type]any)
	case XLCell:
		return any(&Stage.XLCells).(*map[*Type]any)
	case XLFile:
		return any(&Stage.XLFiles).(*map[*Type]any)
	case XLRow:
		return any(&Stage.XLRows).(*map[*Type]any)
	case XLSheet:
		return any(&Stage.XLSheets).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct]() *map[string]*Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case DisplaySelection:
		return any(&Stage.DisplaySelections_mapString).(*map[string]*Type)
	case XLCell:
		return any(&Stage.XLCells_mapString).(*map[string]*Type)
	case XLFile:
		return any(&Stage.XLFiles_mapString).(*map[string]*Type)
	case XLRow:
		return any(&Stage.XLRows_mapString).(*map[string]*Type)
	case XLSheet:
		return any(&Stage.XLSheets_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case DisplaySelection:
		return any(&DisplaySelection{
			// Initialisation of associations
			// field is initialized with an instance of XLFile with the name of the field
			XLFile: &XLFile{Name: "XLFile"},
			// field is initialized with an instance of XLSheet with the name of the field
			XLSheet: &XLSheet{Name: "XLSheet"},
		}).(*Type)
	case XLCell:
		return any(&XLCell{
			// Initialisation of associations
		}).(*Type)
	case XLFile:
		return any(&XLFile{
			// Initialisation of associations
			// field is initialized with an instance of XLSheet with the name of the field
			Sheets: []*XLSheet{{Name: "Sheets"}},
		}).(*Type)
	case XLRow:
		return any(&XLRow{
			// Initialisation of associations
			// field is initialized with an instance of XLCell with the name of the field
			Cells: []*XLCell{{Name: "Cells"}},
		}).(*Type)
	case XLSheet:
		return any(&XLSheet{
			// Initialisation of associations
			// field is initialized with an instance of XLRow with the name of the field
			Rows: []*XLRow{{Name: "Rows"}},
			// field is initialized with an instance of XLCell with the name of the field
			SheetCells: []*XLCell{{Name: "SheetCells"}},
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string) map[*End][]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of DisplaySelection
	case DisplaySelection:
		switch fieldname {
		// insertion point for per direct association field
		case "XLFile":
			res := make(map[*XLFile][]*DisplaySelection)
			for displayselection := range Stage.DisplaySelections {
				if displayselection.XLFile != nil {
					xlfile_ := displayselection.XLFile
					var displayselections []*DisplaySelection
					_, ok := res[xlfile_]
					if ok {
						displayselections = res[xlfile_]
					} else {
						displayselections = make([]*DisplaySelection, 0)
					}
					displayselections = append(displayselections, displayselection)
					res[xlfile_] = displayselections
				}
			}
			return any(res).(map[*End][]*Start)
		case "XLSheet":
			res := make(map[*XLSheet][]*DisplaySelection)
			for displayselection := range Stage.DisplaySelections {
				if displayselection.XLSheet != nil {
					xlsheet_ := displayselection.XLSheet
					var displayselections []*DisplaySelection
					_, ok := res[xlsheet_]
					if ok {
						displayselections = res[xlsheet_]
					} else {
						displayselections = make([]*DisplaySelection, 0)
					}
					displayselections = append(displayselections, displayselection)
					res[xlsheet_] = displayselections
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of XLCell
	case XLCell:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of XLFile
	case XLFile:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of XLRow
	case XLRow:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of XLSheet
	case XLSheet:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string) map[*End]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of DisplaySelection
	case DisplaySelection:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of XLCell
	case XLCell:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of XLFile
	case XLFile:
		switch fieldname {
		// insertion point for per direct association field
		case "Sheets":
			res := make(map[*XLSheet]*XLFile)
			for xlfile := range Stage.XLFiles {
				for _, xlsheet_ := range xlfile.Sheets {
					res[xlsheet_] = xlfile
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of XLRow
	case XLRow:
		switch fieldname {
		// insertion point for per direct association field
		case "Cells":
			res := make(map[*XLCell]*XLRow)
			for xlrow := range Stage.XLRows {
				for _, xlcell_ := range xlrow.Cells {
					res[xlcell_] = xlrow
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of XLSheet
	case XLSheet:
		switch fieldname {
		// insertion point for per direct association field
		case "Rows":
			res := make(map[*XLRow]*XLSheet)
			for xlsheet := range Stage.XLSheets {
				for _, xlrow_ := range xlsheet.Rows {
					res[xlrow_] = xlsheet
				}
			}
			return any(res).(map[*End]*Start)
		case "SheetCells":
			res := make(map[*XLCell]*XLSheet)
			for xlsheet := range Stage.XLSheets {
				for _, xlcell_ := range xlsheet.SheetCells {
					res[xlcell_] = xlsheet
				}
			}
			return any(res).(map[*End]*Start)
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case DisplaySelection:
		res = "DisplaySelection"
	case XLCell:
		res = "XLCell"
	case XLFile:
		res = "XLFile"
	case XLRow:
		res = "XLRow"
	case XLSheet:
		res = "XLSheet"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case DisplaySelection:
		res = []string{"Name", "XLFile", "XLSheet"}
	case XLCell:
		res = []string{"Name", "X", "Y"}
	case XLFile:
		res = []string{"Name", "NbSheets", "Sheets"}
	case XLRow:
		res = []string{"Name", "RowIndex", "Cells"}
	case XLSheet:
		res = []string{"Name", "MaxRow", "MaxCol", "NbRows", "Rows", "SheetCells"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case DisplaySelection:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(DisplaySelection).Name
		case "XLFile":
			if any(instance).(DisplaySelection).XLFile != nil {
				res = any(instance).(DisplaySelection).XLFile.Name
			}
		case "XLSheet":
			if any(instance).(DisplaySelection).XLSheet != nil {
				res = any(instance).(DisplaySelection).XLSheet.Name
			}
		}
	case XLCell:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(XLCell).Name
		case "X":
			res = fmt.Sprintf("%d", any(instance).(XLCell).X)
		case "Y":
			res = fmt.Sprintf("%d", any(instance).(XLCell).Y)
		}
	case XLFile:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(XLFile).Name
		case "NbSheets":
			res = fmt.Sprintf("%d", any(instance).(XLFile).NbSheets)
		case "Sheets":
			for idx, __instance__ := range any(instance).(XLFile).Sheets {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case XLRow:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(XLRow).Name
		case "RowIndex":
			res = fmt.Sprintf("%d", any(instance).(XLRow).RowIndex)
		case "Cells":
			for idx, __instance__ := range any(instance).(XLRow).Cells {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case XLSheet:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(XLSheet).Name
		case "MaxRow":
			res = fmt.Sprintf("%d", any(instance).(XLSheet).MaxRow)
		case "MaxCol":
			res = fmt.Sprintf("%d", any(instance).(XLSheet).MaxCol)
		case "NbRows":
			res = fmt.Sprintf("%d", any(instance).(XLSheet).NbRows)
		case "Rows":
			for idx, __instance__ := range any(instance).(XLSheet).Rows {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "SheetCells":
			for idx, __instance__ := range any(instance).(XLSheet).SheetCells {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	}
	return
}

// Last line of the template
