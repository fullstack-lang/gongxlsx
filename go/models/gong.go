// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	DisplaySelections           map[*DisplaySelection]struct{}
	DisplaySelections_mapString map[string]*DisplaySelection

	XLCells           map[*XLCell]struct{}
	XLCells_mapString map[string]*XLCell

	XLFiles           map[*XLFile]struct{}
	XLFiles_mapString map[string]*XLFile

	XLRows           map[*XLRow]struct{}
	XLRows_mapString map[string]*XLRow

	XLSheets           map[*XLSheet]struct{}
	XLSheets_mapString map[string]*XLSheet

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitDisplaySelection(displayselection *DisplaySelection)
	CheckoutDisplaySelection(displayselection *DisplaySelection)
	CommitXLCell(xlcell *XLCell)
	CheckoutXLCell(xlcell *XLCell)
	CommitXLFile(xlfile *XLFile)
	CheckoutXLFile(xlfile *XLFile)
	CommitXLRow(xlrow *XLRow)
	CheckoutXLRow(xlrow *XLRow)
	CommitXLSheet(xlsheet *XLSheet)
	CheckoutXLSheet(xlsheet *XLSheet)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	DisplaySelections:           make(map[*DisplaySelection]struct{}),
	DisplaySelections_mapString: make(map[string]*DisplaySelection),

	XLCells:           make(map[*XLCell]struct{}),
	XLCells_mapString: make(map[string]*XLCell),

	XLFiles:           make(map[*XLFile]struct{}),
	XLFiles_mapString: make(map[string]*XLFile),

	XLRows:           make(map[*XLRow]struct{}),
	XLRows_mapString: make(map[string]*XLRow),

	XLSheets:           make(map[*XLSheet]struct{}),
	XLSheets_mapString: make(map[string]*XLSheet),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["DisplaySelection"] = len(stage.DisplaySelections)
	stage.Map_GongStructName_InstancesNb["XLCell"] = len(stage.XLCells)
	stage.Map_GongStructName_InstancesNb["XLFile"] = len(stage.XLFiles)
	stage.Map_GongStructName_InstancesNb["XLRow"] = len(stage.XLRows)
	stage.Map_GongStructName_InstancesNb["XLSheet"] = len(stage.XLSheets)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getDisplaySelectionOrderedStructWithNameField() []*DisplaySelection {
	// have alphabetical order generation
	displayselectionOrdered := []*DisplaySelection{}
	for displayselection := range stage.DisplaySelections {
		displayselectionOrdered = append(displayselectionOrdered, displayselection)
	}
	sort.Slice(displayselectionOrdered[:], func(i, j int) bool {
		return displayselectionOrdered[i].Name < displayselectionOrdered[j].Name
	})
	return displayselectionOrdered
}

// Stage puts displayselection to the model stage
func (displayselection *DisplaySelection) Stage() *DisplaySelection {
	Stage.DisplaySelections[displayselection] = __member
	Stage.DisplaySelections_mapString[displayselection.Name] = displayselection

	return displayselection
}

// Unstage removes displayselection off the model stage
func (displayselection *DisplaySelection) Unstage() *DisplaySelection {
	delete(Stage.DisplaySelections, displayselection)
	delete(Stage.DisplaySelections_mapString, displayselection.Name)
	return displayselection
}

// commit displayselection to the back repo (if it is already staged)
func (displayselection *DisplaySelection) Commit() *DisplaySelection {
	if _, ok := Stage.DisplaySelections[displayselection]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitDisplaySelection(displayselection)
		}
	}
	return displayselection
}

// Checkout displayselection to the back repo (if it is already staged)
func (displayselection *DisplaySelection) Checkout() *DisplaySelection {
	if _, ok := Stage.DisplaySelections[displayselection]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutDisplaySelection(displayselection)
		}
	}
	return displayselection
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of displayselection to the model stage
func (displayselection *DisplaySelection) StageCopy() *DisplaySelection {
	_displayselection := new(DisplaySelection)
	*_displayselection = *displayselection
	_displayselection.Stage()
	return _displayselection
}

// StageAndCommit appends displayselection to the model stage and commit to the orm repo
func (displayselection *DisplaySelection) StageAndCommit() *DisplaySelection {
	displayselection.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDisplaySelection(displayselection)
	}
	return displayselection
}

// DeleteStageAndCommit appends displayselection to the model stage and commit to the orm repo
func (displayselection *DisplaySelection) DeleteStageAndCommit() *DisplaySelection {
	displayselection.Unstage()
	DeleteORMDisplaySelection(displayselection)
	return displayselection
}

// StageCopyAndCommit appends a copy of displayselection to the model stage and commit to the orm repo
func (displayselection *DisplaySelection) StageCopyAndCommit() *DisplaySelection {
	_displayselection := new(DisplaySelection)
	*_displayselection = *displayselection
	_displayselection.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDisplaySelection(displayselection)
	}
	return _displayselection
}

// CreateORMDisplaySelection enables dynamic staging of a DisplaySelection instance
func CreateORMDisplaySelection(displayselection *DisplaySelection) {
	displayselection.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDisplaySelection(displayselection)
	}
}

// DeleteORMDisplaySelection enables dynamic staging of a DisplaySelection instance
func DeleteORMDisplaySelection(displayselection *DisplaySelection) {
	displayselection.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMDisplaySelection(displayselection)
	}
}

func (stage *StageStruct) getXLCellOrderedStructWithNameField() []*XLCell {
	// have alphabetical order generation
	xlcellOrdered := []*XLCell{}
	for xlcell := range stage.XLCells {
		xlcellOrdered = append(xlcellOrdered, xlcell)
	}
	sort.Slice(xlcellOrdered[:], func(i, j int) bool {
		return xlcellOrdered[i].Name < xlcellOrdered[j].Name
	})
	return xlcellOrdered
}

// Stage puts xlcell to the model stage
func (xlcell *XLCell) Stage() *XLCell {
	Stage.XLCells[xlcell] = __member
	Stage.XLCells_mapString[xlcell.Name] = xlcell

	return xlcell
}

// Unstage removes xlcell off the model stage
func (xlcell *XLCell) Unstage() *XLCell {
	delete(Stage.XLCells, xlcell)
	delete(Stage.XLCells_mapString, xlcell.Name)
	return xlcell
}

// commit xlcell to the back repo (if it is already staged)
func (xlcell *XLCell) Commit() *XLCell {
	if _, ok := Stage.XLCells[xlcell]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLCell(xlcell)
		}
	}
	return xlcell
}

// Checkout xlcell to the back repo (if it is already staged)
func (xlcell *XLCell) Checkout() *XLCell {
	if _, ok := Stage.XLCells[xlcell]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLCell(xlcell)
		}
	}
	return xlcell
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlcell to the model stage
func (xlcell *XLCell) StageCopy() *XLCell {
	_xlcell := new(XLCell)
	*_xlcell = *xlcell
	_xlcell.Stage()
	return _xlcell
}

// StageAndCommit appends xlcell to the model stage and commit to the orm repo
func (xlcell *XLCell) StageAndCommit() *XLCell {
	xlcell.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLCell(xlcell)
	}
	return xlcell
}

// DeleteStageAndCommit appends xlcell to the model stage and commit to the orm repo
func (xlcell *XLCell) DeleteStageAndCommit() *XLCell {
	xlcell.Unstage()
	DeleteORMXLCell(xlcell)
	return xlcell
}

// StageCopyAndCommit appends a copy of xlcell to the model stage and commit to the orm repo
func (xlcell *XLCell) StageCopyAndCommit() *XLCell {
	_xlcell := new(XLCell)
	*_xlcell = *xlcell
	_xlcell.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLCell(xlcell)
	}
	return _xlcell
}

// CreateORMXLCell enables dynamic staging of a XLCell instance
func CreateORMXLCell(xlcell *XLCell) {
	xlcell.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLCell(xlcell)
	}
}

// DeleteORMXLCell enables dynamic staging of a XLCell instance
func DeleteORMXLCell(xlcell *XLCell) {
	xlcell.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLCell(xlcell)
	}
}

func (stage *StageStruct) getXLFileOrderedStructWithNameField() []*XLFile {
	// have alphabetical order generation
	xlfileOrdered := []*XLFile{}
	for xlfile := range stage.XLFiles {
		xlfileOrdered = append(xlfileOrdered, xlfile)
	}
	sort.Slice(xlfileOrdered[:], func(i, j int) bool {
		return xlfileOrdered[i].Name < xlfileOrdered[j].Name
	})
	return xlfileOrdered
}

// Stage puts xlfile to the model stage
func (xlfile *XLFile) Stage() *XLFile {
	Stage.XLFiles[xlfile] = __member
	Stage.XLFiles_mapString[xlfile.Name] = xlfile

	return xlfile
}

// Unstage removes xlfile off the model stage
func (xlfile *XLFile) Unstage() *XLFile {
	delete(Stage.XLFiles, xlfile)
	delete(Stage.XLFiles_mapString, xlfile.Name)
	return xlfile
}

// commit xlfile to the back repo (if it is already staged)
func (xlfile *XLFile) Commit() *XLFile {
	if _, ok := Stage.XLFiles[xlfile]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLFile(xlfile)
		}
	}
	return xlfile
}

// Checkout xlfile to the back repo (if it is already staged)
func (xlfile *XLFile) Checkout() *XLFile {
	if _, ok := Stage.XLFiles[xlfile]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLFile(xlfile)
		}
	}
	return xlfile
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlfile to the model stage
func (xlfile *XLFile) StageCopy() *XLFile {
	_xlfile := new(XLFile)
	*_xlfile = *xlfile
	_xlfile.Stage()
	return _xlfile
}

// StageAndCommit appends xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) StageAndCommit() *XLFile {
	xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
	return xlfile
}

// DeleteStageAndCommit appends xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) DeleteStageAndCommit() *XLFile {
	xlfile.Unstage()
	DeleteORMXLFile(xlfile)
	return xlfile
}

// StageCopyAndCommit appends a copy of xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) StageCopyAndCommit() *XLFile {
	_xlfile := new(XLFile)
	*_xlfile = *xlfile
	_xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
	return _xlfile
}

// CreateORMXLFile enables dynamic staging of a XLFile instance
func CreateORMXLFile(xlfile *XLFile) {
	xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
}

// DeleteORMXLFile enables dynamic staging of a XLFile instance
func DeleteORMXLFile(xlfile *XLFile) {
	xlfile.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLFile(xlfile)
	}
}

func (stage *StageStruct) getXLRowOrderedStructWithNameField() []*XLRow {
	// have alphabetical order generation
	xlrowOrdered := []*XLRow{}
	for xlrow := range stage.XLRows {
		xlrowOrdered = append(xlrowOrdered, xlrow)
	}
	sort.Slice(xlrowOrdered[:], func(i, j int) bool {
		return xlrowOrdered[i].Name < xlrowOrdered[j].Name
	})
	return xlrowOrdered
}

// Stage puts xlrow to the model stage
func (xlrow *XLRow) Stage() *XLRow {
	Stage.XLRows[xlrow] = __member
	Stage.XLRows_mapString[xlrow.Name] = xlrow

	return xlrow
}

// Unstage removes xlrow off the model stage
func (xlrow *XLRow) Unstage() *XLRow {
	delete(Stage.XLRows, xlrow)
	delete(Stage.XLRows_mapString, xlrow.Name)
	return xlrow
}

// commit xlrow to the back repo (if it is already staged)
func (xlrow *XLRow) Commit() *XLRow {
	if _, ok := Stage.XLRows[xlrow]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLRow(xlrow)
		}
	}
	return xlrow
}

// Checkout xlrow to the back repo (if it is already staged)
func (xlrow *XLRow) Checkout() *XLRow {
	if _, ok := Stage.XLRows[xlrow]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLRow(xlrow)
		}
	}
	return xlrow
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlrow to the model stage
func (xlrow *XLRow) StageCopy() *XLRow {
	_xlrow := new(XLRow)
	*_xlrow = *xlrow
	_xlrow.Stage()
	return _xlrow
}

// StageAndCommit appends xlrow to the model stage and commit to the orm repo
func (xlrow *XLRow) StageAndCommit() *XLRow {
	xlrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLRow(xlrow)
	}
	return xlrow
}

// DeleteStageAndCommit appends xlrow to the model stage and commit to the orm repo
func (xlrow *XLRow) DeleteStageAndCommit() *XLRow {
	xlrow.Unstage()
	DeleteORMXLRow(xlrow)
	return xlrow
}

// StageCopyAndCommit appends a copy of xlrow to the model stage and commit to the orm repo
func (xlrow *XLRow) StageCopyAndCommit() *XLRow {
	_xlrow := new(XLRow)
	*_xlrow = *xlrow
	_xlrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLRow(xlrow)
	}
	return _xlrow
}

// CreateORMXLRow enables dynamic staging of a XLRow instance
func CreateORMXLRow(xlrow *XLRow) {
	xlrow.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLRow(xlrow)
	}
}

// DeleteORMXLRow enables dynamic staging of a XLRow instance
func DeleteORMXLRow(xlrow *XLRow) {
	xlrow.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLRow(xlrow)
	}
}

func (stage *StageStruct) getXLSheetOrderedStructWithNameField() []*XLSheet {
	// have alphabetical order generation
	xlsheetOrdered := []*XLSheet{}
	for xlsheet := range stage.XLSheets {
		xlsheetOrdered = append(xlsheetOrdered, xlsheet)
	}
	sort.Slice(xlsheetOrdered[:], func(i, j int) bool {
		return xlsheetOrdered[i].Name < xlsheetOrdered[j].Name
	})
	return xlsheetOrdered
}

// Stage puts xlsheet to the model stage
func (xlsheet *XLSheet) Stage() *XLSheet {
	Stage.XLSheets[xlsheet] = __member
	Stage.XLSheets_mapString[xlsheet.Name] = xlsheet

	return xlsheet
}

// Unstage removes xlsheet off the model stage
func (xlsheet *XLSheet) Unstage() *XLSheet {
	delete(Stage.XLSheets, xlsheet)
	delete(Stage.XLSheets_mapString, xlsheet.Name)
	return xlsheet
}

// commit xlsheet to the back repo (if it is already staged)
func (xlsheet *XLSheet) Commit() *XLSheet {
	if _, ok := Stage.XLSheets[xlsheet]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLSheet(xlsheet)
		}
	}
	return xlsheet
}

// Checkout xlsheet to the back repo (if it is already staged)
func (xlsheet *XLSheet) Checkout() *XLSheet {
	if _, ok := Stage.XLSheets[xlsheet]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLSheet(xlsheet)
		}
	}
	return xlsheet
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlsheet to the model stage
func (xlsheet *XLSheet) StageCopy() *XLSheet {
	_xlsheet := new(XLSheet)
	*_xlsheet = *xlsheet
	_xlsheet.Stage()
	return _xlsheet
}

// StageAndCommit appends xlsheet to the model stage and commit to the orm repo
func (xlsheet *XLSheet) StageAndCommit() *XLSheet {
	xlsheet.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLSheet(xlsheet)
	}
	return xlsheet
}

// DeleteStageAndCommit appends xlsheet to the model stage and commit to the orm repo
func (xlsheet *XLSheet) DeleteStageAndCommit() *XLSheet {
	xlsheet.Unstage()
	DeleteORMXLSheet(xlsheet)
	return xlsheet
}

// StageCopyAndCommit appends a copy of xlsheet to the model stage and commit to the orm repo
func (xlsheet *XLSheet) StageCopyAndCommit() *XLSheet {
	_xlsheet := new(XLSheet)
	*_xlsheet = *xlsheet
	_xlsheet.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLSheet(xlsheet)
	}
	return _xlsheet
}

// CreateORMXLSheet enables dynamic staging of a XLSheet instance
func CreateORMXLSheet(xlsheet *XLSheet) {
	xlsheet.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLSheet(xlsheet)
	}
}

// DeleteORMXLSheet enables dynamic staging of a XLSheet instance
func DeleteORMXLSheet(xlsheet *XLSheet) {
	xlsheet.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLSheet(xlsheet)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMDisplaySelection(DisplaySelection *DisplaySelection)
	CreateORMXLCell(XLCell *XLCell)
	CreateORMXLFile(XLFile *XLFile)
	CreateORMXLRow(XLRow *XLRow)
	CreateORMXLSheet(XLSheet *XLSheet)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMDisplaySelection(DisplaySelection *DisplaySelection)
	DeleteORMXLCell(XLCell *XLCell)
	DeleteORMXLFile(XLFile *XLFile)
	DeleteORMXLRow(XLRow *XLRow)
	DeleteORMXLSheet(XLSheet *XLSheet)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.DisplaySelections = make(map[*DisplaySelection]struct{})
	stage.DisplaySelections_mapString = make(map[string]*DisplaySelection)

	stage.XLCells = make(map[*XLCell]struct{})
	stage.XLCells_mapString = make(map[string]*XLCell)

	stage.XLFiles = make(map[*XLFile]struct{})
	stage.XLFiles_mapString = make(map[string]*XLFile)

	stage.XLRows = make(map[*XLRow]struct{})
	stage.XLRows_mapString = make(map[string]*XLRow)

	stage.XLSheets = make(map[*XLSheet]struct{})
	stage.XLSheets_mapString = make(map[string]*XLSheet)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.DisplaySelections = nil
	stage.DisplaySelections_mapString = nil

	stage.XLCells = nil
	stage.XLCells_mapString = nil

	stage.XLFiles = nil
	stage.XLFiles_mapString = nil

	stage.XLRows = nil
	stage.XLRows_mapString = nil

	stage.XLSheets = nil
	stage.XLSheets_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_DisplaySelection_Identifiers := make(map[*DisplaySelection]string)
	_ = map_DisplaySelection_Identifiers

	displayselectionOrdered := []*DisplaySelection{}
	for displayselection := range stage.DisplaySelections {
		displayselectionOrdered = append(displayselectionOrdered, displayselection)
	}
	sort.Slice(displayselectionOrdered[:], func(i, j int) bool {
		return displayselectionOrdered[i].Name < displayselectionOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of DisplaySelection")
	for idx, displayselection := range displayselectionOrdered {

		id = generatesIdentifier("DisplaySelection", idx, displayselection.Name)
		map_DisplaySelection_Identifiers[displayselection] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "DisplaySelection")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", displayselection.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// DisplaySelection %s values setup", displayselection.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(displayselection.Name))
		initializerStatements += setValueField

	}

	map_XLCell_Identifiers := make(map[*XLCell]string)
	_ = map_XLCell_Identifiers

	xlcellOrdered := []*XLCell{}
	for xlcell := range stage.XLCells {
		xlcellOrdered = append(xlcellOrdered, xlcell)
	}
	sort.Slice(xlcellOrdered[:], func(i, j int) bool {
		return xlcellOrdered[i].Name < xlcellOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of XLCell")
	for idx, xlcell := range xlcellOrdered {

		id = generatesIdentifier("XLCell", idx, xlcell.Name)
		map_XLCell_Identifiers[xlcell] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "XLCell")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", xlcell.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// XLCell %s values setup", xlcell.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(xlcell.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "X")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", xlcell.X))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Y")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", xlcell.Y))
		initializerStatements += setValueField

	}

	map_XLFile_Identifiers := make(map[*XLFile]string)
	_ = map_XLFile_Identifiers

	xlfileOrdered := []*XLFile{}
	for xlfile := range stage.XLFiles {
		xlfileOrdered = append(xlfileOrdered, xlfile)
	}
	sort.Slice(xlfileOrdered[:], func(i, j int) bool {
		return xlfileOrdered[i].Name < xlfileOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of XLFile")
	for idx, xlfile := range xlfileOrdered {

		id = generatesIdentifier("XLFile", idx, xlfile.Name)
		map_XLFile_Identifiers[xlfile] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "XLFile")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", xlfile.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// XLFile %s values setup", xlfile.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(xlfile.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "NbSheets")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", xlfile.NbSheets))
		initializerStatements += setValueField

	}

	map_XLRow_Identifiers := make(map[*XLRow]string)
	_ = map_XLRow_Identifiers

	xlrowOrdered := []*XLRow{}
	for xlrow := range stage.XLRows {
		xlrowOrdered = append(xlrowOrdered, xlrow)
	}
	sort.Slice(xlrowOrdered[:], func(i, j int) bool {
		return xlrowOrdered[i].Name < xlrowOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of XLRow")
	for idx, xlrow := range xlrowOrdered {

		id = generatesIdentifier("XLRow", idx, xlrow.Name)
		map_XLRow_Identifiers[xlrow] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "XLRow")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", xlrow.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// XLRow %s values setup", xlrow.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(xlrow.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "RowIndex")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", xlrow.RowIndex))
		initializerStatements += setValueField

	}

	map_XLSheet_Identifiers := make(map[*XLSheet]string)
	_ = map_XLSheet_Identifiers

	xlsheetOrdered := []*XLSheet{}
	for xlsheet := range stage.XLSheets {
		xlsheetOrdered = append(xlsheetOrdered, xlsheet)
	}
	sort.Slice(xlsheetOrdered[:], func(i, j int) bool {
		return xlsheetOrdered[i].Name < xlsheetOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of XLSheet")
	for idx, xlsheet := range xlsheetOrdered {

		id = generatesIdentifier("XLSheet", idx, xlsheet.Name)
		map_XLSheet_Identifiers[xlsheet] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "XLSheet")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", xlsheet.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// XLSheet %s values setup", xlsheet.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(xlsheet.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "MaxRow")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", xlsheet.MaxRow))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "MaxCol")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", xlsheet.MaxCol))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "NbRows")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", xlsheet.NbRows))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, displayselection := range displayselectionOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("DisplaySelection", idx, displayselection.Name)
		map_DisplaySelection_Identifiers[displayselection] = id

		// Initialisation of values
		if displayselection.XLFile != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "XLFile")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_XLFile_Identifiers[displayselection.XLFile])
			pointersInitializesStatements += setPointerField
		}

		if displayselection.XLSheet != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "XLSheet")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_XLSheet_Identifiers[displayselection.XLSheet])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, xlcell := range xlcellOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("XLCell", idx, xlcell.Name)
		map_XLCell_Identifiers[xlcell] = id

		// Initialisation of values
	}

	for idx, xlfile := range xlfileOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("XLFile", idx, xlfile.Name)
		map_XLFile_Identifiers[xlfile] = id

		// Initialisation of values
		for _, _xlsheet := range xlfile.Sheets {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Sheets")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_XLSheet_Identifiers[_xlsheet])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, xlrow := range xlrowOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("XLRow", idx, xlrow.Name)
		map_XLRow_Identifiers[xlrow] = id

		// Initialisation of values
		for _, _xlcell := range xlrow.Cells {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Cells")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_XLCell_Identifiers[_xlcell])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, xlsheet := range xlsheetOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("XLSheet", idx, xlsheet.Name)
		map_XLSheet_Identifiers[xlsheet] = id

		// Initialisation of values
		for _, _xlrow := range xlsheet.Rows {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Rows")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_XLRow_Identifiers[_xlrow])
			pointersInitializesStatements += setPointerField
		}

		for _, _xlcell := range xlsheet.SheetCells {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "SheetCells")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_XLCell_Identifiers[_xlcell])
			pointersInitializesStatements += setPointerField
		}

	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of enum utility functions
