// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	XLFiles map[*XLFile]struct{}

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface
	
	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	// insertion point for Commit and Checkout signatures
	CommitXLFile(xlfile *XLFile)
	CheckoutXLFile(xlfile *XLFile)
	GetLastCommitNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	XLFiles: make(map[*XLFile]struct{}, 0),

}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getXLFileOrderedStructWithNameField() []*XLFile {
	// have alphabetical order generation
	xlfileOrdered := []*XLFile{}
	for xlfile := range stage.XLFiles {
		xlfileOrdered = append(xlfileOrdered, xlfile)
	}
	sort.Slice(xlfileOrdered[:], func(i, j int) bool {
		return xlfileOrdered[i].Name < xlfileOrdered[j].Name
	})
	return xlfileOrdered
}

// Stage puts xlfile to the model stage
func (xlfile *XLFile) Stage() *XLFile {
	Stage.XLFiles[xlfile] = __member
	return xlfile
}

// Unstage removes xlfile off the model stage
func (xlfile *XLFile) Unstage() *XLFile {
	delete(Stage.XLFiles, xlfile)
	return xlfile
}

// commit xlfile to the back repo (if it is already staged)
func (xlfile *XLFile) Commit() *XLFile {
	if _, ok := Stage.XLFiles[xlfile]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitXLFile(xlfile)
		}
	}
	return xlfile
}

// Checkout xlfile to the back repo (if it is already staged)
func (xlfile *XLFile) Checkout() *XLFile {
	if _, ok := Stage.XLFiles[xlfile]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutXLFile(xlfile)
		}
	}
	return xlfile
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of xlfile to the model stage
func (xlfile *XLFile) StageCopy() *XLFile {
	_xlfile := new(XLFile)
	*_xlfile = *xlfile
	_xlfile.Stage()
	return _xlfile
}

// StageAndCommit appends xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) StageAndCommit() *XLFile {
	xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
	return xlfile
}

// DeleteStageAndCommit appends xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) DeleteStageAndCommit() *XLFile {
	xlfile.Unstage()
	DeleteORMXLFile(xlfile)
	return xlfile
}

// StageCopyAndCommit appends a copy of xlfile to the model stage and commit to the orm repo
func (xlfile *XLFile) StageCopyAndCommit() *XLFile {
	_xlfile := new(XLFile)
	*_xlfile = *xlfile
	_xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
	return _xlfile
}

// CreateORMXLFile enables dynamic staging of a XLFile instance
func CreateORMXLFile(xlfile *XLFile) {
	xlfile.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMXLFile(xlfile)
	}
}

// DeleteORMXLFile enables dynamic staging of a XLFile instance
func DeleteORMXLFile(xlfile *XLFile) {
	xlfile.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMXLFile(xlfile)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMXLFile(XLFile *XLFile)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMXLFile(XLFile *XLFile)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.XLFiles = make(map[*XLFile]struct{}, 0)
}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.XLFiles = nil
}
