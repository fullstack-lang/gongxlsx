// generated by ModelGongGraphFileTemplate
package models

func IsStaged[Type Gongstruct](stage *StageStruct, instance *Type) (ok bool) {

	switch target := any(instance).(type) {
	// insertion point for stage
	case *DisplaySelection:
		ok = stage.IsStagedDisplaySelection(target)

	case *XLCell:
		ok = stage.IsStagedXLCell(target)

	case *XLFile:
		ok = stage.IsStagedXLFile(target)

	case *XLRow:
		ok = stage.IsStagedXLRow(target)

	case *XLSheet:
		ok = stage.IsStagedXLSheet(target)

	}
	return
}

// insertion point for stage per struct
	func (stage *StageStruct) IsStagedDisplaySelection(displayselection *DisplaySelection) (ok bool) {

		_, ok = stage.DisplaySelections[displayselection]
	
		return
	}

	func (stage *StageStruct) IsStagedXLCell(xlcell *XLCell) (ok bool) {

		_, ok = stage.XLCells[xlcell]
	
		return
	}

	func (stage *StageStruct) IsStagedXLFile(xlfile *XLFile) (ok bool) {

		_, ok = stage.XLFiles[xlfile]
	
		return
	}

	func (stage *StageStruct) IsStagedXLRow(xlrow *XLRow) (ok bool) {

		_, ok = stage.XLRows[xlrow]
	
		return
	}

	func (stage *StageStruct) IsStagedXLSheet(xlsheet *XLSheet) (ok bool) {

		_, ok = stage.XLSheets[xlsheet]
	
		return
	}


// StageBranch stages instance and apply StageBranch on all gongstruct instances that are
// referenced by pointers or slices of pointers of the insance
//
// the algorithm stops along the course of graph if a vertex is already staged
func StageBranch[Type Gongstruct](stage *StageStruct, instance *Type) {

	switch target := any(instance).(type) {
	// insertion point for stage branch
	case *DisplaySelection:
		stage.StageBranchDisplaySelection(target)

	case *XLCell:
		stage.StageBranchXLCell(target)

	case *XLFile:
		stage.StageBranchXLFile(target)

	case *XLRow:
		stage.StageBranchXLRow(target)

	case *XLSheet:
		stage.StageBranchXLSheet(target)

	}
}

// insertion point for stage branch per struct
func (stage *StageStruct) StageBranchDisplaySelection(displayselection *DisplaySelection) {

	// check if instance is already staged
	if IsStaged(stage, displayselection) {
		return
	}

	displayselection.Stage()

	//insertion point for the staging of instances referenced by pointers
	if displayselection.XLFile != nil {
		StageBranch(stage, displayselection.XLFile)
	}
	if displayselection.XLSheet != nil {
		StageBranch(stage, displayselection.XLSheet)
	}

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) StageBranchXLCell(xlcell *XLCell) {

	// check if instance is already staged
	if IsStaged(stage, xlcell) {
		return
	}

	xlcell.Stage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) StageBranchXLFile(xlfile *XLFile) {

	// check if instance is already staged
	if IsStaged(stage, xlfile) {
		return
	}

	xlfile.Stage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _xlsheet := range xlfile.Sheets {
		StageBranch(stage, _xlsheet)
	}

}

func (stage *StageStruct) StageBranchXLRow(xlrow *XLRow) {

	// check if instance is already staged
	if IsStaged(stage, xlrow) {
		return
	}

	xlrow.Stage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _xlcell := range xlrow.Cells {
		StageBranch(stage, _xlcell)
	}

}

func (stage *StageStruct) StageBranchXLSheet(xlsheet *XLSheet) {

	// check if instance is already staged
	if IsStaged(stage, xlsheet) {
		return
	}

	xlsheet.Stage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _xlrow := range xlsheet.Rows {
		StageBranch(stage, _xlrow)
	}
	for _, _xlcell := range xlsheet.SheetCells {
		StageBranch(stage, _xlcell)
	}

}


// UnstageBranch stages instance and apply UnstageBranch on all gongstruct instances that are
// referenced by pointers or slices of pointers of the insance
//
// the algorithm stops along the course of graph if a vertex is already staged
func UnstageBranch[Type Gongstruct](stage *StageStruct, instance *Type) {

	switch target := any(instance).(type) {
	// insertion point for unstage branch
	case *DisplaySelection:
		stage.UnstageBranchDisplaySelection(target)

	case *XLCell:
		stage.UnstageBranchXLCell(target)

	case *XLFile:
		stage.UnstageBranchXLFile(target)

	case *XLRow:
		stage.UnstageBranchXLRow(target)

	case *XLSheet:
		stage.UnstageBranchXLSheet(target)

	}
}

// insertion point for unstage branch per struct
func (stage *StageStruct) UnstageBranchDisplaySelection(displayselection *DisplaySelection) {

	// check if instance is already staged
	if ! IsStaged(stage, displayselection) {
		return
	}

	displayselection.Unstage()

	//insertion point for the staging of instances referenced by pointers
	if displayselection.XLFile != nil {
		UnstageBranch(stage, displayselection.XLFile)
	}
	if displayselection.XLSheet != nil {
		UnstageBranch(stage, displayselection.XLSheet)
	}

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) UnstageBranchXLCell(xlcell *XLCell) {

	// check if instance is already staged
	if ! IsStaged(stage, xlcell) {
		return
	}

	xlcell.Unstage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) UnstageBranchXLFile(xlfile *XLFile) {

	// check if instance is already staged
	if ! IsStaged(stage, xlfile) {
		return
	}

	xlfile.Unstage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _xlsheet := range xlfile.Sheets {
		UnstageBranch(stage, _xlsheet)
	}

}

func (stage *StageStruct) UnstageBranchXLRow(xlrow *XLRow) {

	// check if instance is already staged
	if ! IsStaged(stage, xlrow) {
		return
	}

	xlrow.Unstage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _xlcell := range xlrow.Cells {
		UnstageBranch(stage, _xlcell)
	}

}

func (stage *StageStruct) UnstageBranchXLSheet(xlsheet *XLSheet) {

	// check if instance is already staged
	if ! IsStaged(stage, xlsheet) {
		return
	}

	xlsheet.Unstage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _xlrow := range xlsheet.Rows {
		UnstageBranch(stage, _xlrow)
	}
	for _, _xlcell := range xlsheet.SheetCells {
		UnstageBranch(stage, _xlcell)
	}

}

