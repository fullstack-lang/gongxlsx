// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongxslx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Xslx sql.NullBool
var __Xslx_time__dummyDeclaration time.Duration
var dummy_Xslx_sort sort.Float64Slice

// XslxAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model xslxAPI
type XslxAPI struct {
	models.Xslx

	// insertion for fields declaration
	// Declation for basic field xslxDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field xslxDB.NbSheets {{BasicKind}} (to be completed)
	NbSheets_Data sql.NullInt64

	// end of insertion
}

// XslxDB describes a xslx in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model xslxDB
type XslxDB struct {
	gorm.Model

	XslxAPI
}

// XslxDBs arrays xslxDBs
// swagger:response xslxDBsResponse
type XslxDBs []XslxDB

// XslxDBResponse provides response
// swagger:response xslxDBResponse
type XslxDBResponse struct {
	XslxDB
}

type BackRepoXslxStruct struct {
	// stores XslxDB according to their gorm ID
	Map_XslxDBID_XslxDB *map[uint]*XslxDB

	// stores XslxDB ID according to Xslx address
	Map_XslxPtr_XslxDBID *map[*models.Xslx]uint

	// stores Xslx according to their gorm ID
	Map_XslxDBID_XslxPtr *map[uint]*models.Xslx

	db *gorm.DB
}

// BackRepoXslx.Init set up the BackRepo of the Xslx
func (backRepoXslx *BackRepoXslxStruct) Init(db *gorm.DB) (Error error) {

	if backRepoXslx.Map_XslxDBID_XslxPtr != nil {
		err := errors.New("In Init, backRepoXslx.Map_XslxDBID_XslxPtr should be nil")
		return err
	}

	if backRepoXslx.Map_XslxDBID_XslxDB != nil {
		err := errors.New("In Init, backRepoXslx.Map_XslxDBID_XslxDB should be nil")
		return err
	}

	if backRepoXslx.Map_XslxPtr_XslxDBID != nil {
		err := errors.New("In Init, backRepoXslx.Map_XslxPtr_XslxDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Xslx, 0)
	backRepoXslx.Map_XslxDBID_XslxPtr = &tmp

	tmpDB := make(map[uint]*XslxDB, 0)
	backRepoXslx.Map_XslxDBID_XslxDB = &tmpDB

	tmpID := make(map[*models.Xslx]uint, 0)
	backRepoXslx.Map_XslxPtr_XslxDBID = &tmpID

	backRepoXslx.db = db
	return
}

// BackRepoXslx.CommitPhaseOne commits all staged instances of Xslx to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXslx *BackRepoXslxStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for xslx := range stage.Xslxs {
		backRepoXslx.CommitPhaseOneInstance(xslx)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, xslx := range *backRepoXslx.Map_XslxDBID_XslxPtr {
		if _, ok := stage.Xslxs[xslx]; !ok {
			backRepoXslx.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoXslx.CommitDeleteInstance commits deletion of Xslx to the BackRepo
func (backRepoXslx *BackRepoXslxStruct) CommitDeleteInstance(id uint) (Error error) {

	xslx := (*backRepoXslx.Map_XslxDBID_XslxPtr)[id]

	// xslx is not staged anymore, remove xslxDB
	xslxDB := (*backRepoXslx.Map_XslxDBID_XslxDB)[id]
	query := backRepoXslx.db.Unscoped().Delete(&xslxDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoXslx.Map_XslxPtr_XslxDBID), xslx)
	delete((*backRepoXslx.Map_XslxDBID_XslxPtr), id)
	delete((*backRepoXslx.Map_XslxDBID_XslxDB), id)

	return
}

// BackRepoXslx.CommitPhaseOneInstance commits xslx staged instances of Xslx to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXslx *BackRepoXslxStruct) CommitPhaseOneInstance(xslx *models.Xslx) (Error error) {

	// check if the xslx is not commited yet
	if _, ok := (*backRepoXslx.Map_XslxPtr_XslxDBID)[xslx]; ok {
		return
	}

	// initiate xslx
	var xslxDB XslxDB
	xslxDB.Xslx = *xslx

	query := backRepoXslx.db.Create(&xslxDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoXslx.Map_XslxPtr_XslxDBID)[xslx] = xslxDB.ID
	(*backRepoXslx.Map_XslxDBID_XslxPtr)[xslxDB.ID] = xslx
	(*backRepoXslx.Map_XslxDBID_XslxDB)[xslxDB.ID] = &xslxDB

	return
}

// BackRepoXslx.CommitPhaseTwo commits all staged instances of Xslx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXslx *BackRepoXslxStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, xslx := range *backRepoXslx.Map_XslxDBID_XslxPtr {
		backRepoXslx.CommitPhaseTwoInstance(backRepo, idx, xslx)
	}

	return
}

// BackRepoXslx.CommitPhaseTwoInstance commits {{structname }} of models.Xslx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXslx *BackRepoXslxStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, xslx *models.Xslx) (Error error) {

	// fetch matching xslxDB
	if xslxDB, ok := (*backRepoXslx.Map_XslxDBID_XslxDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				xslxDB.Name_Data.String = xslx.Name
				xslxDB.Name_Data.Valid = true

				xslxDB.NbSheets_Data.Int64 = int64(xslx.NbSheets)
				xslxDB.NbSheets_Data.Valid = true

			}
		}
		query := backRepoXslx.db.Save(&xslxDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Xslx intance %s", xslx.Name))
		return err
	}

	return
}

// BackRepoXslx.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoXslx *BackRepoXslxStruct) CheckoutPhaseOne() (Error error) {

	xslxDBArray := make([]XslxDB, 0)
	query := backRepoXslx.db.Find(&xslxDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, xslxDB := range xslxDBArray {
		backRepoXslx.CheckoutPhaseOneInstance(&xslxDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a xslxDB that has been found in the DB, updates the backRepo and stages the
// models version of the xslxDB
func (backRepoXslx *BackRepoXslxStruct) CheckoutPhaseOneInstance(xslxDB *XslxDB) (Error error) {

	// if absent, create entries in the backRepoXslx maps.
	xslxWithNewFieldValues := xslxDB.Xslx
	if _, ok := (*backRepoXslx.Map_XslxDBID_XslxPtr)[xslxDB.ID]; !ok {

		(*backRepoXslx.Map_XslxDBID_XslxPtr)[xslxDB.ID] = &xslxWithNewFieldValues
		(*backRepoXslx.Map_XslxPtr_XslxDBID)[&xslxWithNewFieldValues] = xslxDB.ID

		// append model store with the new element
		xslxWithNewFieldValues.Stage()
	}
	xslxDBWithNewFieldValues := *xslxDB
	(*backRepoXslx.Map_XslxDBID_XslxDB)[xslxDB.ID] = &xslxDBWithNewFieldValues

	return
}

// BackRepoXslx.CheckoutPhaseTwo Checkouts all staged instances of Xslx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXslx *BackRepoXslxStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, xslxDB := range *backRepoXslx.Map_XslxDBID_XslxDB {
		backRepoXslx.CheckoutPhaseTwoInstance(backRepo, xslxDB)
	}
	return
}

// BackRepoXslx.CheckoutPhaseTwoInstance Checkouts staged instances of Xslx to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXslx *BackRepoXslxStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, xslxDB *XslxDB) (Error error) {

	xslx := (*backRepoXslx.Map_XslxDBID_XslxPtr)[xslxDB.ID]
	_ = xslx // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			xslx.Name = xslxDB.Name_Data.String

			xslx.NbSheets = int(xslxDB.NbSheets_Data.Int64)

		}
	}
	return
}

// CommitXslx allows commit of a single xslx (if already staged)
func (backRepo *BackRepoStruct) CommitXslx(xslx *models.Xslx) {
	backRepo.BackRepoXslx.CommitPhaseOneInstance(xslx)
	if id, ok := (*backRepo.BackRepoXslx.Map_XslxPtr_XslxDBID)[xslx]; ok {
		backRepo.BackRepoXslx.CommitPhaseTwoInstance(backRepo, id, xslx)
	}
}

// CommitXslx allows checkout of a single xslx (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutXslx(xslx *models.Xslx) {
	// check if the xslx is staged
	if _, ok := (*backRepo.BackRepoXslx.Map_XslxPtr_XslxDBID)[xslx]; ok {

		if id, ok := (*backRepo.BackRepoXslx.Map_XslxPtr_XslxDBID)[xslx]; ok {
			var xslxDB XslxDB
			xslxDB.ID = id

			if err := backRepo.BackRepoXslx.db.First(&xslxDB, id).Error; err != nil {
				log.Panicln("CheckoutXslx : Problem with getting object with id:", id)
			}
			backRepo.BackRepoXslx.CheckoutPhaseOneInstance(&xslxDB)
			backRepo.BackRepoXslx.CheckoutPhaseTwoInstance(backRepo, &xslxDB)
		}
	}
}
