// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongxlsx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_XLRow sql.NullBool
var __XLRow_time__dummyDeclaration time.Duration
var dummy_XLRow_sort sort.Float64Slice

// XLRowAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model xlrowAPI
type XLRowAPI struct {
	models.XLRow

	// insertion for fields declaration
	// Declation for basic field xlrowDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field xlrowDB.RowIndex {{BasicKind}} (to be completed)
	RowIndex_Data sql.NullInt64

	// Declation for basic field xlrowDB.NbCols {{BasicKind}} (to be completed)
	NbCols_Data sql.NullInt64

	// Implementation of a reverse ID for field XLSheet{}.Rows []*XLRow
	XLSheet_RowsDBID sql.NullInt64
	XLSheet_RowsDBID_Index sql.NullInt64

	// end of insertion
}

// XLRowDB describes a xlrow in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model xlrowDB
type XLRowDB struct {
	gorm.Model

	XLRowAPI
}

// XLRowDBs arrays xlrowDBs
// swagger:response xlrowDBsResponse
type XLRowDBs []XLRowDB

// XLRowDBResponse provides response
// swagger:response xlrowDBResponse
type XLRowDBResponse struct {
	XLRowDB
}

type BackRepoXLRowStruct struct {
	// stores XLRowDB according to their gorm ID
	Map_XLRowDBID_XLRowDB *map[uint]*XLRowDB

	// stores XLRowDB ID according to XLRow address
	Map_XLRowPtr_XLRowDBID *map[*models.XLRow]uint

	// stores XLRow according to their gorm ID
	Map_XLRowDBID_XLRowPtr *map[uint]*models.XLRow

	db *gorm.DB
}

// BackRepoXLRow.Init set up the BackRepo of the XLRow
func (backRepoXLRow *BackRepoXLRowStruct) Init(db *gorm.DB) (Error error) {

	if backRepoXLRow.Map_XLRowDBID_XLRowPtr != nil {
		err := errors.New("In Init, backRepoXLRow.Map_XLRowDBID_XLRowPtr should be nil")
		return err
	}

	if backRepoXLRow.Map_XLRowDBID_XLRowDB != nil {
		err := errors.New("In Init, backRepoXLRow.Map_XLRowDBID_XLRowDB should be nil")
		return err
	}

	if backRepoXLRow.Map_XLRowPtr_XLRowDBID != nil {
		err := errors.New("In Init, backRepoXLRow.Map_XLRowPtr_XLRowDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.XLRow, 0)
	backRepoXLRow.Map_XLRowDBID_XLRowPtr = &tmp

	tmpDB := make(map[uint]*XLRowDB, 0)
	backRepoXLRow.Map_XLRowDBID_XLRowDB = &tmpDB

	tmpID := make(map[*models.XLRow]uint, 0)
	backRepoXLRow.Map_XLRowPtr_XLRowDBID = &tmpID

	backRepoXLRow.db = db
	return
}

// BackRepoXLRow.CommitPhaseOne commits all staged instances of XLRow to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLRow *BackRepoXLRowStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for xlrow := range stage.XLRows {
		backRepoXLRow.CommitPhaseOneInstance(xlrow)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, xlrow := range *backRepoXLRow.Map_XLRowDBID_XLRowPtr {
		if _, ok := stage.XLRows[xlrow]; !ok {
			backRepoXLRow.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoXLRow.CommitDeleteInstance commits deletion of XLRow to the BackRepo
func (backRepoXLRow *BackRepoXLRowStruct) CommitDeleteInstance(id uint) (Error error) {

	xlrow := (*backRepoXLRow.Map_XLRowDBID_XLRowPtr)[id]

	// xlrow is not staged anymore, remove xlrowDB
	xlrowDB := (*backRepoXLRow.Map_XLRowDBID_XLRowDB)[id]
	query := backRepoXLRow.db.Unscoped().Delete(&xlrowDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoXLRow.Map_XLRowPtr_XLRowDBID), xlrow)
	delete((*backRepoXLRow.Map_XLRowDBID_XLRowPtr), id)
	delete((*backRepoXLRow.Map_XLRowDBID_XLRowDB), id)

	return
}

// BackRepoXLRow.CommitPhaseOneInstance commits xlrow staged instances of XLRow to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLRow *BackRepoXLRowStruct) CommitPhaseOneInstance(xlrow *models.XLRow) (Error error) {

	// check if the xlrow is not commited yet
	if _, ok := (*backRepoXLRow.Map_XLRowPtr_XLRowDBID)[xlrow]; ok {
		return
	}

	// initiate xlrow
	var xlrowDB XLRowDB
	xlrowDB.XLRow = *xlrow

	query := backRepoXLRow.db.Create(&xlrowDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoXLRow.Map_XLRowPtr_XLRowDBID)[xlrow] = xlrowDB.ID
	(*backRepoXLRow.Map_XLRowDBID_XLRowPtr)[xlrowDB.ID] = xlrow
	(*backRepoXLRow.Map_XLRowDBID_XLRowDB)[xlrowDB.ID] = &xlrowDB

	return
}

// BackRepoXLRow.CommitPhaseTwo commits all staged instances of XLRow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLRow *BackRepoXLRowStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, xlrow := range *backRepoXLRow.Map_XLRowDBID_XLRowPtr {
		backRepoXLRow.CommitPhaseTwoInstance(backRepo, idx, xlrow)
	}

	return
}

// BackRepoXLRow.CommitPhaseTwoInstance commits {{structname }} of models.XLRow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLRow *BackRepoXLRowStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, xlrow *models.XLRow) (Error error) {

	// fetch matching xlrowDB
	if xlrowDB, ok := (*backRepoXLRow.Map_XLRowDBID_XLRowDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				xlrowDB.Name_Data.String = xlrow.Name
				xlrowDB.Name_Data.Valid = true

				xlrowDB.RowIndex_Data.Int64 = int64(xlrow.RowIndex)
				xlrowDB.RowIndex_Data.Valid = true

				xlrowDB.NbCols_Data.Int64 = int64(xlrow.NbCols)
				xlrowDB.NbCols_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to XLCell, i.e.
				index_Cells := 0
				for _, xlcell := range xlrow.Cells {
					if xlcellDBID, ok := (*backRepo.BackRepoXLCell.Map_XLCellPtr_XLCellDBID)[xlcell]; ok {
						if xlcellDB, ok := (*backRepo.BackRepoXLCell.Map_XLCellDBID_XLCellDB)[xlcellDBID]; ok {
							xlcellDB.XLRow_CellsDBID.Int64 = int64(xlrowDB.ID)
							xlcellDB.XLRow_CellsDBID.Valid = true
							xlcellDB.XLRow_CellsDBID_Index.Int64 = int64(index_Cells)
							index_Cells = index_Cells + 1
							xlcellDB.XLRow_CellsDBID_Index.Valid = true
							if q := backRepoXLRow.db.Save(&xlcellDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoXLRow.db.Save(&xlrowDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown XLRow intance %s", xlrow.Name))
		return err
	}

	return
}

// BackRepoXLRow.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoXLRow *BackRepoXLRowStruct) CheckoutPhaseOne() (Error error) {

	xlrowDBArray := make([]XLRowDB, 0)
	query := backRepoXLRow.db.Find(&xlrowDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, xlrowDB := range xlrowDBArray {
		backRepoXLRow.CheckoutPhaseOneInstance(&xlrowDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a xlrowDB that has been found in the DB, updates the backRepo and stages the
// models version of the xlrowDB
func (backRepoXLRow *BackRepoXLRowStruct) CheckoutPhaseOneInstance(xlrowDB *XLRowDB) (Error error) {

	// if absent, create entries in the backRepoXLRow maps.
	xlrowWithNewFieldValues := xlrowDB.XLRow
	if _, ok := (*backRepoXLRow.Map_XLRowDBID_XLRowPtr)[xlrowDB.ID]; !ok {

		(*backRepoXLRow.Map_XLRowDBID_XLRowPtr)[xlrowDB.ID] = &xlrowWithNewFieldValues
		(*backRepoXLRow.Map_XLRowPtr_XLRowDBID)[&xlrowWithNewFieldValues] = xlrowDB.ID

		// append model store with the new element
		xlrowWithNewFieldValues.Stage()
	}
	xlrowDBWithNewFieldValues := *xlrowDB
	(*backRepoXLRow.Map_XLRowDBID_XLRowDB)[xlrowDB.ID] = &xlrowDBWithNewFieldValues

	return
}

// BackRepoXLRow.CheckoutPhaseTwo Checkouts all staged instances of XLRow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLRow *BackRepoXLRowStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, xlrowDB := range *backRepoXLRow.Map_XLRowDBID_XLRowDB {
		backRepoXLRow.CheckoutPhaseTwoInstance(backRepo, xlrowDB)
	}
	return
}

// BackRepoXLRow.CheckoutPhaseTwoInstance Checkouts staged instances of XLRow to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLRow *BackRepoXLRowStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, xlrowDB *XLRowDB) (Error error) {

	xlrow := (*backRepoXLRow.Map_XLRowDBID_XLRowPtr)[xlrowDB.ID]
	_ = xlrow // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			xlrow.Name = xlrowDB.Name_Data.String

			xlrow.RowIndex = int(xlrowDB.RowIndex_Data.Int64)

			xlrow.NbCols = int(xlrowDB.NbCols_Data.Int64)

			// parse all XLCellDB and redeem the array of poiners to XLRow
			// first reset the slice
			xlrow.Cells = xlrow.Cells[:0]
			for _, XLCellDB := range *backRepo.BackRepoXLCell.Map_XLCellDBID_XLCellDB {
				if XLCellDB.XLRow_CellsDBID.Int64 == int64(xlrowDB.ID) {
					XLCell := (*backRepo.BackRepoXLCell.Map_XLCellDBID_XLCellPtr)[XLCellDB.ID]
					xlrow.Cells = append(xlrow.Cells, XLCell)
				}
			}
			
			// sort the array according to the order
			sort.Slice(xlrow.Cells, func(i, j int) bool {
				xlcellDB_i_ID := (*backRepo.BackRepoXLCell.Map_XLCellPtr_XLCellDBID)[xlrow.Cells[i]]
				xlcellDB_j_ID := (*backRepo.BackRepoXLCell.Map_XLCellPtr_XLCellDBID)[xlrow.Cells[j]]

				xlcellDB_i := (*backRepo.BackRepoXLCell.Map_XLCellDBID_XLCellDB)[xlcellDB_i_ID]
				xlcellDB_j := (*backRepo.BackRepoXLCell.Map_XLCellDBID_XLCellDB)[xlcellDB_j_ID]

				return xlcellDB_i.XLRow_CellsDBID_Index.Int64 < xlcellDB_j.XLRow_CellsDBID_Index.Int64
			})

		}
	}
	return
}

// CommitXLRow allows commit of a single xlrow (if already staged)
func (backRepo *BackRepoStruct) CommitXLRow(xlrow *models.XLRow) {
	backRepo.BackRepoXLRow.CommitPhaseOneInstance(xlrow)
	if id, ok := (*backRepo.BackRepoXLRow.Map_XLRowPtr_XLRowDBID)[xlrow]; ok {
		backRepo.BackRepoXLRow.CommitPhaseTwoInstance(backRepo, id, xlrow)
	}
}

// CommitXLRow allows checkout of a single xlrow (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutXLRow(xlrow *models.XLRow) {
	// check if the xlrow is staged
	if _, ok := (*backRepo.BackRepoXLRow.Map_XLRowPtr_XLRowDBID)[xlrow]; ok {

		if id, ok := (*backRepo.BackRepoXLRow.Map_XLRowPtr_XLRowDBID)[xlrow]; ok {
			var xlrowDB XLRowDB
			xlrowDB.ID = id

			if err := backRepo.BackRepoXLRow.db.First(&xlrowDB, id).Error; err != nil {
				log.Panicln("CheckoutXLRow : Problem with getting object with id:", id)
			}
			backRepo.BackRepoXLRow.CheckoutPhaseOneInstance(&xlrowDB)
			backRepo.BackRepoXLRow.CheckoutPhaseTwoInstance(backRepo, &xlrowDB)
		}
	}
}
