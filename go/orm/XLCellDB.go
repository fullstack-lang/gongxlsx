// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongxlsx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_XLCell sql.NullBool
var __XLCell_time__dummyDeclaration time.Duration
var dummy_XLCell_sort sort.Float64Slice

// XLCellAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model xlcellAPI
type XLCellAPI struct {
	models.XLCell

	// insertion for fields declaration
	// Declation for basic field xlcellDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field xlcellDB.X {{BasicKind}} (to be completed)
	X_Data sql.NullInt64

	// Declation for basic field xlcellDB.Y {{BasicKind}} (to be completed)
	Y_Data sql.NullInt64

	// Implementation of a reverse ID for field XLRow{}.Cells []*XLCell
	XLRow_CellsDBID sql.NullInt64
	XLRow_CellsDBID_Index sql.NullInt64

	// Implementation of a reverse ID for field XLSheet{}.SheetCells []*XLCell
	XLSheet_SheetCellsDBID sql.NullInt64
	XLSheet_SheetCellsDBID_Index sql.NullInt64

	// end of insertion
}

// XLCellDB describes a xlcell in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model xlcellDB
type XLCellDB struct {
	gorm.Model

	XLCellAPI
}

// XLCellDBs arrays xlcellDBs
// swagger:response xlcellDBsResponse
type XLCellDBs []XLCellDB

// XLCellDBResponse provides response
// swagger:response xlcellDBResponse
type XLCellDBResponse struct {
	XLCellDB
}

type BackRepoXLCellStruct struct {
	// stores XLCellDB according to their gorm ID
	Map_XLCellDBID_XLCellDB *map[uint]*XLCellDB

	// stores XLCellDB ID according to XLCell address
	Map_XLCellPtr_XLCellDBID *map[*models.XLCell]uint

	// stores XLCell according to their gorm ID
	Map_XLCellDBID_XLCellPtr *map[uint]*models.XLCell

	db *gorm.DB
}

// BackRepoXLCell.Init set up the BackRepo of the XLCell
func (backRepoXLCell *BackRepoXLCellStruct) Init(db *gorm.DB) (Error error) {

	if backRepoXLCell.Map_XLCellDBID_XLCellPtr != nil {
		err := errors.New("In Init, backRepoXLCell.Map_XLCellDBID_XLCellPtr should be nil")
		return err
	}

	if backRepoXLCell.Map_XLCellDBID_XLCellDB != nil {
		err := errors.New("In Init, backRepoXLCell.Map_XLCellDBID_XLCellDB should be nil")
		return err
	}

	if backRepoXLCell.Map_XLCellPtr_XLCellDBID != nil {
		err := errors.New("In Init, backRepoXLCell.Map_XLCellPtr_XLCellDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.XLCell, 0)
	backRepoXLCell.Map_XLCellDBID_XLCellPtr = &tmp

	tmpDB := make(map[uint]*XLCellDB, 0)
	backRepoXLCell.Map_XLCellDBID_XLCellDB = &tmpDB

	tmpID := make(map[*models.XLCell]uint, 0)
	backRepoXLCell.Map_XLCellPtr_XLCellDBID = &tmpID

	backRepoXLCell.db = db
	return
}

// BackRepoXLCell.CommitPhaseOne commits all staged instances of XLCell to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLCell *BackRepoXLCellStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for xlcell := range stage.XLCells {
		backRepoXLCell.CommitPhaseOneInstance(xlcell)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, xlcell := range *backRepoXLCell.Map_XLCellDBID_XLCellPtr {
		if _, ok := stage.XLCells[xlcell]; !ok {
			backRepoXLCell.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoXLCell.CommitDeleteInstance commits deletion of XLCell to the BackRepo
func (backRepoXLCell *BackRepoXLCellStruct) CommitDeleteInstance(id uint) (Error error) {

	xlcell := (*backRepoXLCell.Map_XLCellDBID_XLCellPtr)[id]

	// xlcell is not staged anymore, remove xlcellDB
	xlcellDB := (*backRepoXLCell.Map_XLCellDBID_XLCellDB)[id]
	query := backRepoXLCell.db.Unscoped().Delete(&xlcellDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoXLCell.Map_XLCellPtr_XLCellDBID), xlcell)
	delete((*backRepoXLCell.Map_XLCellDBID_XLCellPtr), id)
	delete((*backRepoXLCell.Map_XLCellDBID_XLCellDB), id)

	return
}

// BackRepoXLCell.CommitPhaseOneInstance commits xlcell staged instances of XLCell to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLCell *BackRepoXLCellStruct) CommitPhaseOneInstance(xlcell *models.XLCell) (Error error) {

	// check if the xlcell is not commited yet
	if _, ok := (*backRepoXLCell.Map_XLCellPtr_XLCellDBID)[xlcell]; ok {
		return
	}

	// initiate xlcell
	var xlcellDB XLCellDB
	xlcellDB.XLCell = *xlcell

	query := backRepoXLCell.db.Create(&xlcellDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoXLCell.Map_XLCellPtr_XLCellDBID)[xlcell] = xlcellDB.ID
	(*backRepoXLCell.Map_XLCellDBID_XLCellPtr)[xlcellDB.ID] = xlcell
	(*backRepoXLCell.Map_XLCellDBID_XLCellDB)[xlcellDB.ID] = &xlcellDB

	return
}

// BackRepoXLCell.CommitPhaseTwo commits all staged instances of XLCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLCell *BackRepoXLCellStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, xlcell := range *backRepoXLCell.Map_XLCellDBID_XLCellPtr {
		backRepoXLCell.CommitPhaseTwoInstance(backRepo, idx, xlcell)
	}

	return
}

// BackRepoXLCell.CommitPhaseTwoInstance commits {{structname }} of models.XLCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLCell *BackRepoXLCellStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, xlcell *models.XLCell) (Error error) {

	// fetch matching xlcellDB
	if xlcellDB, ok := (*backRepoXLCell.Map_XLCellDBID_XLCellDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				xlcellDB.Name_Data.String = xlcell.Name
				xlcellDB.Name_Data.Valid = true

				xlcellDB.X_Data.Int64 = int64(xlcell.X)
				xlcellDB.X_Data.Valid = true

				xlcellDB.Y_Data.Int64 = int64(xlcell.Y)
				xlcellDB.Y_Data.Valid = true

			}
		}
		query := backRepoXLCell.db.Save(&xlcellDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown XLCell intance %s", xlcell.Name))
		return err
	}

	return
}

// BackRepoXLCell.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoXLCell *BackRepoXLCellStruct) CheckoutPhaseOne() (Error error) {

	xlcellDBArray := make([]XLCellDB, 0)
	query := backRepoXLCell.db.Find(&xlcellDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, xlcellDB := range xlcellDBArray {
		backRepoXLCell.CheckoutPhaseOneInstance(&xlcellDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a xlcellDB that has been found in the DB, updates the backRepo and stages the
// models version of the xlcellDB
func (backRepoXLCell *BackRepoXLCellStruct) CheckoutPhaseOneInstance(xlcellDB *XLCellDB) (Error error) {

	// if absent, create entries in the backRepoXLCell maps.
	xlcellWithNewFieldValues := xlcellDB.XLCell
	if _, ok := (*backRepoXLCell.Map_XLCellDBID_XLCellPtr)[xlcellDB.ID]; !ok {

		(*backRepoXLCell.Map_XLCellDBID_XLCellPtr)[xlcellDB.ID] = &xlcellWithNewFieldValues
		(*backRepoXLCell.Map_XLCellPtr_XLCellDBID)[&xlcellWithNewFieldValues] = xlcellDB.ID

		// append model store with the new element
		xlcellWithNewFieldValues.Stage()
	}
	xlcellDBWithNewFieldValues := *xlcellDB
	(*backRepoXLCell.Map_XLCellDBID_XLCellDB)[xlcellDB.ID] = &xlcellDBWithNewFieldValues

	return
}

// BackRepoXLCell.CheckoutPhaseTwo Checkouts all staged instances of XLCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLCell *BackRepoXLCellStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, xlcellDB := range *backRepoXLCell.Map_XLCellDBID_XLCellDB {
		backRepoXLCell.CheckoutPhaseTwoInstance(backRepo, xlcellDB)
	}
	return
}

// BackRepoXLCell.CheckoutPhaseTwoInstance Checkouts staged instances of XLCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLCell *BackRepoXLCellStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, xlcellDB *XLCellDB) (Error error) {

	xlcell := (*backRepoXLCell.Map_XLCellDBID_XLCellPtr)[xlcellDB.ID]
	_ = xlcell // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			xlcell.Name = xlcellDB.Name_Data.String

			xlcell.X = int(xlcellDB.X_Data.Int64)

			xlcell.Y = int(xlcellDB.Y_Data.Int64)

		}
	}
	return
}

// CommitXLCell allows commit of a single xlcell (if already staged)
func (backRepo *BackRepoStruct) CommitXLCell(xlcell *models.XLCell) {
	backRepo.BackRepoXLCell.CommitPhaseOneInstance(xlcell)
	if id, ok := (*backRepo.BackRepoXLCell.Map_XLCellPtr_XLCellDBID)[xlcell]; ok {
		backRepo.BackRepoXLCell.CommitPhaseTwoInstance(backRepo, id, xlcell)
	}
}

// CommitXLCell allows checkout of a single xlcell (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutXLCell(xlcell *models.XLCell) {
	// check if the xlcell is staged
	if _, ok := (*backRepo.BackRepoXLCell.Map_XLCellPtr_XLCellDBID)[xlcell]; ok {

		if id, ok := (*backRepo.BackRepoXLCell.Map_XLCellPtr_XLCellDBID)[xlcell]; ok {
			var xlcellDB XLCellDB
			xlcellDB.ID = id

			if err := backRepo.BackRepoXLCell.db.First(&xlcellDB, id).Error; err != nil {
				log.Panicln("CheckoutXLCell : Problem with getting object with id:", id)
			}
			backRepo.BackRepoXLCell.CheckoutPhaseOneInstance(&xlcellDB)
			backRepo.BackRepoXLCell.CheckoutPhaseTwoInstance(backRepo, &xlcellDB)
		}
	}
}
