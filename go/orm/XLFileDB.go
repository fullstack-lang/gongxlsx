// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongxslx/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_XLFile sql.NullBool
var __XLFile_time__dummyDeclaration time.Duration
var dummy_XLFile_sort sort.Float64Slice

// XLFileAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model xlfileAPI
type XLFileAPI struct {
	models.XLFile

	// insertion for fields declaration
	// Declation for basic field xlfileDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field xlfileDB.NbSheets {{BasicKind}} (to be completed)
	NbSheets_Data sql.NullInt64

	// end of insertion
}

// XLFileDB describes a xlfile in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model xlfileDB
type XLFileDB struct {
	gorm.Model

	XLFileAPI
}

// XLFileDBs arrays xlfileDBs
// swagger:response xlfileDBsResponse
type XLFileDBs []XLFileDB

// XLFileDBResponse provides response
// swagger:response xlfileDBResponse
type XLFileDBResponse struct {
	XLFileDB
}

type BackRepoXLFileStruct struct {
	// stores XLFileDB according to their gorm ID
	Map_XLFileDBID_XLFileDB *map[uint]*XLFileDB

	// stores XLFileDB ID according to XLFile address
	Map_XLFilePtr_XLFileDBID *map[*models.XLFile]uint

	// stores XLFile according to their gorm ID
	Map_XLFileDBID_XLFilePtr *map[uint]*models.XLFile

	db *gorm.DB
}

// BackRepoXLFile.Init set up the BackRepo of the XLFile
func (backRepoXLFile *BackRepoXLFileStruct) Init(db *gorm.DB) (Error error) {

	if backRepoXLFile.Map_XLFileDBID_XLFilePtr != nil {
		err := errors.New("In Init, backRepoXLFile.Map_XLFileDBID_XLFilePtr should be nil")
		return err
	}

	if backRepoXLFile.Map_XLFileDBID_XLFileDB != nil {
		err := errors.New("In Init, backRepoXLFile.Map_XLFileDBID_XLFileDB should be nil")
		return err
	}

	if backRepoXLFile.Map_XLFilePtr_XLFileDBID != nil {
		err := errors.New("In Init, backRepoXLFile.Map_XLFilePtr_XLFileDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.XLFile, 0)
	backRepoXLFile.Map_XLFileDBID_XLFilePtr = &tmp

	tmpDB := make(map[uint]*XLFileDB, 0)
	backRepoXLFile.Map_XLFileDBID_XLFileDB = &tmpDB

	tmpID := make(map[*models.XLFile]uint, 0)
	backRepoXLFile.Map_XLFilePtr_XLFileDBID = &tmpID

	backRepoXLFile.db = db
	return
}

// BackRepoXLFile.CommitPhaseOne commits all staged instances of XLFile to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLFile *BackRepoXLFileStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for xlfile := range stage.XLFiles {
		backRepoXLFile.CommitPhaseOneInstance(xlfile)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, xlfile := range *backRepoXLFile.Map_XLFileDBID_XLFilePtr {
		if _, ok := stage.XLFiles[xlfile]; !ok {
			backRepoXLFile.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoXLFile.CommitDeleteInstance commits deletion of XLFile to the BackRepo
func (backRepoXLFile *BackRepoXLFileStruct) CommitDeleteInstance(id uint) (Error error) {

	xlfile := (*backRepoXLFile.Map_XLFileDBID_XLFilePtr)[id]

	// xlfile is not staged anymore, remove xlfileDB
	xlfileDB := (*backRepoXLFile.Map_XLFileDBID_XLFileDB)[id]
	query := backRepoXLFile.db.Unscoped().Delete(&xlfileDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoXLFile.Map_XLFilePtr_XLFileDBID), xlfile)
	delete((*backRepoXLFile.Map_XLFileDBID_XLFilePtr), id)
	delete((*backRepoXLFile.Map_XLFileDBID_XLFileDB), id)

	return
}

// BackRepoXLFile.CommitPhaseOneInstance commits xlfile staged instances of XLFile to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXLFile *BackRepoXLFileStruct) CommitPhaseOneInstance(xlfile *models.XLFile) (Error error) {

	// check if the xlfile is not commited yet
	if _, ok := (*backRepoXLFile.Map_XLFilePtr_XLFileDBID)[xlfile]; ok {
		return
	}

	// initiate xlfile
	var xlfileDB XLFileDB
	xlfileDB.XLFile = *xlfile

	query := backRepoXLFile.db.Create(&xlfileDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoXLFile.Map_XLFilePtr_XLFileDBID)[xlfile] = xlfileDB.ID
	(*backRepoXLFile.Map_XLFileDBID_XLFilePtr)[xlfileDB.ID] = xlfile
	(*backRepoXLFile.Map_XLFileDBID_XLFileDB)[xlfileDB.ID] = &xlfileDB

	return
}

// BackRepoXLFile.CommitPhaseTwo commits all staged instances of XLFile to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLFile *BackRepoXLFileStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, xlfile := range *backRepoXLFile.Map_XLFileDBID_XLFilePtr {
		backRepoXLFile.CommitPhaseTwoInstance(backRepo, idx, xlfile)
	}

	return
}

// BackRepoXLFile.CommitPhaseTwoInstance commits {{structname }} of models.XLFile to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLFile *BackRepoXLFileStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, xlfile *models.XLFile) (Error error) {

	// fetch matching xlfileDB
	if xlfileDB, ok := (*backRepoXLFile.Map_XLFileDBID_XLFileDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				xlfileDB.Name_Data.String = xlfile.Name
				xlfileDB.Name_Data.Valid = true

				xlfileDB.NbSheets_Data.Int64 = int64(xlfile.NbSheets)
				xlfileDB.NbSheets_Data.Valid = true

				// commit a slice of pointer translates to update reverse pointer to XLSheet, i.e.
				index_Sheets := 0
				for _, xlsheet := range xlfile.Sheets {
					if xlsheetDBID, ok := (*backRepo.BackRepoXLSheet.Map_XLSheetPtr_XLSheetDBID)[xlsheet]; ok {
						if xlsheetDB, ok := (*backRepo.BackRepoXLSheet.Map_XLSheetDBID_XLSheetDB)[xlsheetDBID]; ok {
							xlsheetDB.XLFile_SheetsDBID.Int64 = int64(xlfileDB.ID)
							xlsheetDB.XLFile_SheetsDBID.Valid = true
							xlsheetDB.XLFile_SheetsDBID_Index.Int64 = int64(index_Sheets)
							index_Sheets = index_Sheets + 1
							xlsheetDB.XLFile_SheetsDBID_Index.Valid = true
							if q := backRepoXLFile.db.Save(&xlsheetDB); q.Error != nil {
								return q.Error
							}
						}
					}
				}

			}
		}
		query := backRepoXLFile.db.Save(&xlfileDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown XLFile intance %s", xlfile.Name))
		return err
	}

	return
}

// BackRepoXLFile.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoXLFile *BackRepoXLFileStruct) CheckoutPhaseOne() (Error error) {

	xlfileDBArray := make([]XLFileDB, 0)
	query := backRepoXLFile.db.Find(&xlfileDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, xlfileDB := range xlfileDBArray {
		backRepoXLFile.CheckoutPhaseOneInstance(&xlfileDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a xlfileDB that has been found in the DB, updates the backRepo and stages the
// models version of the xlfileDB
func (backRepoXLFile *BackRepoXLFileStruct) CheckoutPhaseOneInstance(xlfileDB *XLFileDB) (Error error) {

	// if absent, create entries in the backRepoXLFile maps.
	xlfileWithNewFieldValues := xlfileDB.XLFile
	if _, ok := (*backRepoXLFile.Map_XLFileDBID_XLFilePtr)[xlfileDB.ID]; !ok {

		(*backRepoXLFile.Map_XLFileDBID_XLFilePtr)[xlfileDB.ID] = &xlfileWithNewFieldValues
		(*backRepoXLFile.Map_XLFilePtr_XLFileDBID)[&xlfileWithNewFieldValues] = xlfileDB.ID

		// append model store with the new element
		xlfileWithNewFieldValues.Stage()
	}
	xlfileDBWithNewFieldValues := *xlfileDB
	(*backRepoXLFile.Map_XLFileDBID_XLFileDB)[xlfileDB.ID] = &xlfileDBWithNewFieldValues

	return
}

// BackRepoXLFile.CheckoutPhaseTwo Checkouts all staged instances of XLFile to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLFile *BackRepoXLFileStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, xlfileDB := range *backRepoXLFile.Map_XLFileDBID_XLFileDB {
		backRepoXLFile.CheckoutPhaseTwoInstance(backRepo, xlfileDB)
	}
	return
}

// BackRepoXLFile.CheckoutPhaseTwoInstance Checkouts staged instances of XLFile to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXLFile *BackRepoXLFileStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, xlfileDB *XLFileDB) (Error error) {

	xlfile := (*backRepoXLFile.Map_XLFileDBID_XLFilePtr)[xlfileDB.ID]
	_ = xlfile // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			xlfile.Name = xlfileDB.Name_Data.String

			xlfile.NbSheets = int(xlfileDB.NbSheets_Data.Int64)

			// parse all XLSheetDB and redeem the array of poiners to XLFile
			// first reset the slice
			xlfile.Sheets = xlfile.Sheets[:0]
			for _, XLSheetDB := range *backRepo.BackRepoXLSheet.Map_XLSheetDBID_XLSheetDB {
				if XLSheetDB.XLFile_SheetsDBID.Int64 == int64(xlfileDB.ID) {
					XLSheet := (*backRepo.BackRepoXLSheet.Map_XLSheetDBID_XLSheetPtr)[XLSheetDB.ID]
					xlfile.Sheets = append(xlfile.Sheets, XLSheet)
				}
			}
			
			// sort the array according to the order
			sort.Slice(xlfile.Sheets, func(i, j int) bool {
				xlsheetDB_i_ID := (*backRepo.BackRepoXLSheet.Map_XLSheetPtr_XLSheetDBID)[xlfile.Sheets[i]]
				xlsheetDB_j_ID := (*backRepo.BackRepoXLSheet.Map_XLSheetPtr_XLSheetDBID)[xlfile.Sheets[j]]

				xlsheetDB_i := (*backRepo.BackRepoXLSheet.Map_XLSheetDBID_XLSheetDB)[xlsheetDB_i_ID]
				xlsheetDB_j := (*backRepo.BackRepoXLSheet.Map_XLSheetDBID_XLSheetDB)[xlsheetDB_j_ID]

				return xlsheetDB_i.XLFile_SheetsDBID_Index.Int64 < xlsheetDB_j.XLFile_SheetsDBID_Index.Int64
			})

		}
	}
	return
}

// CommitXLFile allows commit of a single xlfile (if already staged)
func (backRepo *BackRepoStruct) CommitXLFile(xlfile *models.XLFile) {
	backRepo.BackRepoXLFile.CommitPhaseOneInstance(xlfile)
	if id, ok := (*backRepo.BackRepoXLFile.Map_XLFilePtr_XLFileDBID)[xlfile]; ok {
		backRepo.BackRepoXLFile.CommitPhaseTwoInstance(backRepo, id, xlfile)
	}
}

// CommitXLFile allows checkout of a single xlfile (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutXLFile(xlfile *models.XLFile) {
	// check if the xlfile is staged
	if _, ok := (*backRepo.BackRepoXLFile.Map_XLFilePtr_XLFileDBID)[xlfile]; ok {

		if id, ok := (*backRepo.BackRepoXLFile.Map_XLFilePtr_XLFileDBID)[xlfile]; ok {
			var xlfileDB XLFileDB
			xlfileDB.ID = id

			if err := backRepo.BackRepoXLFile.db.First(&xlfileDB, id).Error; err != nil {
				log.Panicln("CheckoutXLFile : Problem with getting object with id:", id)
			}
			backRepo.BackRepoXLFile.CheckoutPhaseOneInstance(&xlfileDB)
			backRepo.BackRepoXLFile.CheckoutPhaseTwoInstance(backRepo, &xlfileDB)
		}
	}
}
