// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongxlsx/go/models"
	"github.com/fullstack-lang/gongxlsx/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __XLCell__dummysDeclaration__ models.XLCell
var __XLCell_time__dummyDeclaration time.Duration

// An XLCellID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getXLCell updateXLCell deleteXLCell
type XLCellID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// XLCellInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postXLCell updateXLCell
type XLCellInput struct {
	// The XLCell to submit or modify
	// in: body
	XLCell *orm.XLCellAPI
}

// GetXLCells
//
// swagger:route GET /xlcells xlcells getXLCells
//
// Get all xlcells
//
// Responses:
//    default: genericError
//        200: xlcellDBsResponse
func GetXLCells(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var xlcells []orm.XLCellDB
	query := db.Find(&xlcells)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each xlcell, update fields from the database nullable fields
	for idx := range xlcells {
		xlcell := &xlcells[idx]
		_ = xlcell
		// insertion point for updating fields
		if xlcell.Name_Data.Valid {
			xlcell.Name = xlcell.Name_Data.String
		}

		if xlcell.X_Data.Valid {
			xlcell.X = int(xlcell.X_Data.Int64)
		}

		if xlcell.Y_Data.Valid {
			xlcell.Y = int(xlcell.Y_Data.Int64)
		}

	}

	c.JSON(http.StatusOK, xlcells)
}

// PostXLCell
//
// swagger:route POST /xlcells xlcells postXLCell
//
// Creates a xlcell
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: xlcellDBResponse
func PostXLCell(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.XLCellAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create xlcell
	xlcellDB := orm.XLCellDB{}
	xlcellDB.XLCellAPI = input
	// insertion point for nullable field set
	xlcellDB.Name_Data.String = input.Name
	xlcellDB.Name_Data.Valid = true

	xlcellDB.X_Data.Int64 = int64(input.X)
	xlcellDB.X_Data.Valid = true

	xlcellDB.Y_Data.Int64 = int64(input.Y)
	xlcellDB.Y_Data.Valid = true

	query := db.Create(&xlcellDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, xlcellDB)
}

// GetXLCell
//
// swagger:route GET /xlcells/{ID} xlcells getXLCell
//
// Gets the details for a xlcell.
//
// Responses:
//    default: genericError
//        200: xlcellDBResponse
func GetXLCell(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get xlcell in DB
	var xlcell orm.XLCellDB
	if err := db.First(&xlcell, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if xlcell.Name_Data.Valid {
		xlcell.Name = xlcell.Name_Data.String
	}

	if xlcell.X_Data.Valid {
		xlcell.X = int(xlcell.X_Data.Int64)
	}

	if xlcell.Y_Data.Valid {
		xlcell.Y = int(xlcell.Y_Data.Int64)
	}

	c.JSON(http.StatusOK, xlcell)
}

// UpdateXLCell
//
// swagger:route PATCH /xlcells/{ID} xlcells updateXLCell
//
// Update a xlcell
//
// Responses:
//    default: genericError
//        200: xlcellDBResponse
func UpdateXLCell(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var xlcellDB orm.XLCellDB

	// fetch the xlcell
	query := db.First(&xlcellDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.XLCellAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.X_Data.Int64 = int64(input.X)
	input.X_Data.Valid = true

	input.Y_Data.Int64 = int64(input.Y)
	input.Y_Data.Valid = true

	query = db.Model(&xlcellDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the xlcellDB
	c.JSON(http.StatusOK, xlcellDB)
}

// DeleteXLCell
//
// swagger:route DELETE /xlcells/{ID} xlcells deleteXLCell
//
// Delete a xlcell
//
// Responses:
//    default: genericError
func DeleteXLCell(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var xlcellDB orm.XLCellDB
	if err := db.First(&xlcellDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&xlcellDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
