// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongxslx/go/models"
	"github.com/fullstack-lang/gongxslx/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __Xslx__dummysDeclaration__ models.Xslx
var __Xslx_time__dummyDeclaration time.Duration

// An XslxID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getXslx updateXslx deleteXslx
type XslxID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// XslxInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postXslx updateXslx
type XslxInput struct {
	// The Xslx to submit or modify
	// in: body
	Xslx *orm.XslxAPI
}

// GetXslxs
//
// swagger:route GET /xslxs xslxs getXslxs
//
// Get all xslxs
//
// Responses:
//    default: genericError
//        200: xslxDBsResponse
func GetXslxs(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var xslxs []orm.XslxDB
	query := db.Find(&xslxs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each xslx, update fields from the database nullable fields
	for idx := range xslxs {
		xslx := &xslxs[idx]
		_ = xslx
		// insertion point for updating fields
		if xslx.Name_Data.Valid {
			xslx.Name = xslx.Name_Data.String
		}

		if xslx.NbSheets_Data.Valid {
			xslx.NbSheets = int(xslx.NbSheets_Data.Int64)
		}

	}

	c.JSON(http.StatusOK, xslxs)
}

// PostXslx
//
// swagger:route POST /xslxs xslxs postXslx
//
// Creates a xslx
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: xslxDBResponse
func PostXslx(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.XslxAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create xslx
	xslxDB := orm.XslxDB{}
	xslxDB.XslxAPI = input
	// insertion point for nullable field set
	xslxDB.Name_Data.String = input.Name
	xslxDB.Name_Data.Valid = true

	xslxDB.NbSheets_Data.Int64 = int64(input.NbSheets)
	xslxDB.NbSheets_Data.Valid = true

	query := db.Create(&xslxDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, xslxDB)
}

// GetXslx
//
// swagger:route GET /xslxs/{ID} xslxs getXslx
//
// Gets the details for a xslx.
//
// Responses:
//    default: genericError
//        200: xslxDBResponse
func GetXslx(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get xslx in DB
	var xslx orm.XslxDB
	if err := db.First(&xslx, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if xslx.Name_Data.Valid {
		xslx.Name = xslx.Name_Data.String
	}

	if xslx.NbSheets_Data.Valid {
		xslx.NbSheets = int(xslx.NbSheets_Data.Int64)
	}

	c.JSON(http.StatusOK, xslx)
}

// UpdateXslx
//
// swagger:route PATCH /xslxs/{ID} xslxs updateXslx
//
// Update a xslx
//
// Responses:
//    default: genericError
//        200: xslxDBResponse
func UpdateXslx(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var xslxDB orm.XslxDB

	// fetch the xslx
	query := db.First(&xslxDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.XslxAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.NbSheets_Data.Int64 = int64(input.NbSheets)
	input.NbSheets_Data.Valid = true

	query = db.Model(&xslxDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the xslxDB
	c.JSON(http.StatusOK, xslxDB)
}

// DeleteXslx
//
// swagger:route DELETE /xslxs/{ID} xslxs deleteXslx
//
// Delete a xslx
//
// Responses:
//    default: genericError
func DeleteXslx(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var xslxDB orm.XslxDB
	if err := db.First(&xslxDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&xslxDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
