// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongxslx/go/models"
	"github.com/fullstack-lang/gongxslx/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __XLRow__dummysDeclaration__ models.XLRow
var __XLRow_time__dummyDeclaration time.Duration

// An XLRowID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getXLRow updateXLRow deleteXLRow
type XLRowID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// XLRowInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postXLRow updateXLRow
type XLRowInput struct {
	// The XLRow to submit or modify
	// in: body
	XLRow *orm.XLRowAPI
}

// GetXLRows
//
// swagger:route GET /xlrows xlrows getXLRows
//
// Get all xlrows
//
// Responses:
//    default: genericError
//        200: xlrowDBsResponse
func GetXLRows(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var xlrows []orm.XLRowDB
	query := db.Find(&xlrows)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each xlrow, update fields from the database nullable fields
	for idx := range xlrows {
		xlrow := &xlrows[idx]
		_ = xlrow
		// insertion point for updating fields
		if xlrow.Name_Data.Valid {
			xlrow.Name = xlrow.Name_Data.String
		}

		if xlrow.RowIndex_Data.Valid {
			xlrow.RowIndex = int(xlrow.RowIndex_Data.Int64)
		}

		if xlrow.NbCols_Data.Valid {
			xlrow.NbCols = int(xlrow.NbCols_Data.Int64)
		}

	}

	c.JSON(http.StatusOK, xlrows)
}

// PostXLRow
//
// swagger:route POST /xlrows xlrows postXLRow
//
// Creates a xlrow
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: xlrowDBResponse
func PostXLRow(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.XLRowAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create xlrow
	xlrowDB := orm.XLRowDB{}
	xlrowDB.XLRowAPI = input
	// insertion point for nullable field set
	xlrowDB.Name_Data.String = input.Name
	xlrowDB.Name_Data.Valid = true

	xlrowDB.RowIndex_Data.Int64 = int64(input.RowIndex)
	xlrowDB.RowIndex_Data.Valid = true

	xlrowDB.NbCols_Data.Int64 = int64(input.NbCols)
	xlrowDB.NbCols_Data.Valid = true

	query := db.Create(&xlrowDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, xlrowDB)
}

// GetXLRow
//
// swagger:route GET /xlrows/{ID} xlrows getXLRow
//
// Gets the details for a xlrow.
//
// Responses:
//    default: genericError
//        200: xlrowDBResponse
func GetXLRow(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get xlrow in DB
	var xlrow orm.XLRowDB
	if err := db.First(&xlrow, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if xlrow.Name_Data.Valid {
		xlrow.Name = xlrow.Name_Data.String
	}

	if xlrow.RowIndex_Data.Valid {
		xlrow.RowIndex = int(xlrow.RowIndex_Data.Int64)
	}

	if xlrow.NbCols_Data.Valid {
		xlrow.NbCols = int(xlrow.NbCols_Data.Int64)
	}

	c.JSON(http.StatusOK, xlrow)
}

// UpdateXLRow
//
// swagger:route PATCH /xlrows/{ID} xlrows updateXLRow
//
// Update a xlrow
//
// Responses:
//    default: genericError
//        200: xlrowDBResponse
func UpdateXLRow(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var xlrowDB orm.XLRowDB

	// fetch the xlrow
	query := db.First(&xlrowDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.XLRowAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.RowIndex_Data.Int64 = int64(input.RowIndex)
	input.RowIndex_Data.Valid = true

	input.NbCols_Data.Int64 = int64(input.NbCols)
	input.NbCols_Data.Valid = true

	query = db.Model(&xlrowDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the xlrowDB
	c.JSON(http.StatusOK, xlrowDB)
}

// DeleteXLRow
//
// swagger:route DELETE /xlrows/{ID} xlrows deleteXLRow
//
// Delete a xlrow
//
// Responses:
//    default: genericError
func DeleteXLRow(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var xlrowDB orm.XLRowDB
	if err := db.First(&xlrowDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&xlrowDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
