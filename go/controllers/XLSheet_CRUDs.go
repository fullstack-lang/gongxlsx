// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongxslx/go/models"
	"github.com/fullstack-lang/gongxslx/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __XLSheet__dummysDeclaration__ models.XLSheet
var __XLSheet_time__dummyDeclaration time.Duration

// An XLSheetID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getXLSheet updateXLSheet deleteXLSheet
type XLSheetID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// XLSheetInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postXLSheet updateXLSheet
type XLSheetInput struct {
	// The XLSheet to submit or modify
	// in: body
	XLSheet *orm.XLSheetAPI
}

// GetXLSheets
//
// swagger:route GET /xlsheets xlsheets getXLSheets
//
// Get all xlsheets
//
// Responses:
//    default: genericError
//        200: xlsheetDBsResponse
func GetXLSheets(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var xlsheets []orm.XLSheetDB
	query := db.Find(&xlsheets)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each xlsheet, update fields from the database nullable fields
	for idx := range xlsheets {
		xlsheet := &xlsheets[idx]
		_ = xlsheet
		// insertion point for updating fields
		if xlsheet.Name_Data.Valid {
			xlsheet.Name = xlsheet.Name_Data.String
		}

		if xlsheet.MaxRow_Data.Valid {
			xlsheet.MaxRow = int(xlsheet.MaxRow_Data.Int64)
		}

		if xlsheet.MaxCol_Data.Valid {
			xlsheet.MaxCol = int(xlsheet.MaxCol_Data.Int64)
		}

	}

	c.JSON(http.StatusOK, xlsheets)
}

// PostXLSheet
//
// swagger:route POST /xlsheets xlsheets postXLSheet
//
// Creates a xlsheet
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: xlsheetDBResponse
func PostXLSheet(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.XLSheetAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create xlsheet
	xlsheetDB := orm.XLSheetDB{}
	xlsheetDB.XLSheetAPI = input
	// insertion point for nullable field set
	xlsheetDB.Name_Data.String = input.Name
	xlsheetDB.Name_Data.Valid = true

	xlsheetDB.MaxRow_Data.Int64 = int64(input.MaxRow)
	xlsheetDB.MaxRow_Data.Valid = true

	xlsheetDB.MaxCol_Data.Int64 = int64(input.MaxCol)
	xlsheetDB.MaxCol_Data.Valid = true

	query := db.Create(&xlsheetDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, xlsheetDB)
}

// GetXLSheet
//
// swagger:route GET /xlsheets/{ID} xlsheets getXLSheet
//
// Gets the details for a xlsheet.
//
// Responses:
//    default: genericError
//        200: xlsheetDBResponse
func GetXLSheet(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get xlsheet in DB
	var xlsheet orm.XLSheetDB
	if err := db.First(&xlsheet, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if xlsheet.Name_Data.Valid {
		xlsheet.Name = xlsheet.Name_Data.String
	}

	if xlsheet.MaxRow_Data.Valid {
		xlsheet.MaxRow = int(xlsheet.MaxRow_Data.Int64)
	}

	if xlsheet.MaxCol_Data.Valid {
		xlsheet.MaxCol = int(xlsheet.MaxCol_Data.Int64)
	}

	c.JSON(http.StatusOK, xlsheet)
}

// UpdateXLSheet
//
// swagger:route PATCH /xlsheets/{ID} xlsheets updateXLSheet
//
// Update a xlsheet
//
// Responses:
//    default: genericError
//        200: xlsheetDBResponse
func UpdateXLSheet(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var xlsheetDB orm.XLSheetDB

	// fetch the xlsheet
	query := db.First(&xlsheetDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.XLSheetAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.MaxRow_Data.Int64 = int64(input.MaxRow)
	input.MaxRow_Data.Valid = true

	input.MaxCol_Data.Int64 = int64(input.MaxCol)
	input.MaxCol_Data.Valid = true

	query = db.Model(&xlsheetDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the xlsheetDB
	c.JSON(http.StatusOK, xlsheetDB)
}

// DeleteXLSheet
//
// swagger:route DELETE /xlsheets/{ID} xlsheets deleteXLSheet
//
// Delete a xlsheet
//
// Responses:
//    default: genericError
func DeleteXLSheet(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var xlsheetDB orm.XLSheetDB
	if err := db.First(&xlsheetDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&xlsheetDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
